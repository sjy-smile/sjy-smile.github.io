<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉排序树，中序遍历，二分查找代码</title>
      <link href="/posts/87097c16.html"/>
      <url>/posts/87097c16.html</url>
      
        <content type="html"><![CDATA[<p>二叉排序树，中序遍历，二分查找代码</p><p>读取10个元素 87 7 60 80 59 34 86 99 21 3，然后建立二叉查找树，中序遍历输出3 7 21 34 59 60 80 86 87 99，针对有序后的元素，存入一个长度为10的数组中，通过折半查找找到21的下标（下标为2），然后输出 2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTNode</span> &#123;</span><br><span class="line">    KeyType key;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BSTNode</span> *lchild, *rchild;</span><br><span class="line">&#125; BSTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertBST</span><span class="params">(BiTree &amp;T, KeyType k)</span> </span>&#123;</span><br><span class="line">    BiTree treeNew = (BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BSTNode));<span class="comment">// 给新节点申请空间</span></span><br><span class="line">    treeNew-&gt;key = k;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;  <span class="comment">// T 是树根</span></span><br><span class="line">        T = treeNew;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BiTree p = T, parent; <span class="comment">// 用来查找树</span></span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        parent = p; <span class="comment">// parent用来存储p的父亲</span></span><br><span class="line">        <span class="keyword">if</span> (k &gt; p-&gt;key) &#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; p-&gt;key) &#123;</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 相等的元素不可以放入查找树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接下来要判断放到父亲的左边还是右边</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; parent-&gt;key) &#123;</span><br><span class="line">        parent-&gt;rchild = treeNew;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent-&gt;lchild = treeNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉查找树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createBST</span><span class="params">(BiTree &amp;T, KeyType *str, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">insertBST</span>(T, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createBSTOrder</span><span class="params">(BiTree &amp;T, KeyType *str, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>; <span class="comment">// T 是树根</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="built_in">insertBST</span>(T, str[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历，从小到大</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTree T, <span class="type">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> pos = <span class="number">0</span>;  <span class="comment">// 局部静态变量只会初始化一次</span></span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(T-&gt;lchild, arr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, T-&gt;key);</span><br><span class="line">        arr[pos] = T-&gt;key; <span class="comment">// 输出的同时存入数组</span></span><br><span class="line">        pos += <span class="number">1</span>;<span class="comment">// 下标加一</span></span><br><span class="line">        <span class="built_in">inOrder</span>(T-&gt;rchild, arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找（折半查找） 时间复杂度 logN</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span> arr[], KeyType key, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, mid, high = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;<span class="comment">//等于就找到了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉排序树，中序遍历，二分查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTree T = <span class="literal">NULL</span>;<span class="comment">//树根</span></span><br><span class="line">    KeyType str[<span class="number">10</span>] = &#123;<span class="number">87</span>, <span class="number">7</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">59</span>, <span class="number">34</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">3</span>&#125;;<span class="comment">//将要进入二叉排序树的元素值</span></span><br><span class="line">    <span class="comment">// 创建二叉树</span></span><br><span class="line">    <span class="built_in">createBST</span>(T, str, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="built_in">inOrder</span>(T, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 折半查找（二分查找，必须排序后才能使用）</span></span><br><span class="line">    <span class="type">int</span> val = <span class="built_in">binarySearch</span>(str, <span class="number">21</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树创建，二叉排序树新建，中序遍历，查找，删除</title>
      <link href="/posts/88176c0c.html"/>
      <url>/posts/88176c0c.html</url>
      
        <content type="html"><![CDATA[<p>二叉树创建，二叉排序树新建，中序遍历，查找，删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTNode</span> &#123;</span><br><span class="line">    KeyType key;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BSTNode</span> *lchild, *rchild;</span><br><span class="line">&#125; BSTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertBST</span><span class="params">(BiTree &amp;T, KeyType k)</span> </span>&#123;</span><br><span class="line">    BiTree treeNew = (BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BSTNode));<span class="comment">// 给新节点申请空间</span></span><br><span class="line">    treeNew-&gt;key = k;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;  <span class="comment">// T 是树根</span></span><br><span class="line">        T = treeNew;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BiTree p = T, parent; <span class="comment">// 用来查找树</span></span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        parent = p; <span class="comment">// parent用来存储p的父亲</span></span><br><span class="line">        <span class="keyword">if</span> (k &gt; p-&gt;key) &#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; p-&gt;key) &#123;</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 相等的元素不可以放入查找树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接下来要判断放到父亲的左边还是右边</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; parent-&gt;key) &#123;</span><br><span class="line">        parent-&gt;rchild = treeNew;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent-&gt;lchild = treeNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉查找树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createBST</span><span class="params">(BiTree &amp;T, KeyType *str, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">insertBST</span>(T, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createBSTOrder</span><span class="params">(BiTree &amp;T, KeyType *str, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>; <span class="comment">// T 是树根</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="built_in">insertBST</span>(T, str[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历，从小到大</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, T-&gt;key);</span><br><span class="line">        <span class="built_in">inOrder</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="function">BiTree <span class="title">searchBST</span><span class="params">(BiTree T, KeyType k, BiTree parent)</span> </span>&#123;</span><br><span class="line">    parent = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (T != <span class="literal">NULL</span> &amp;&amp; k != T-&gt;key) &#123;</span><br><span class="line">        parent = T;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; T-&gt;key) &#123;</span><br><span class="line">            T = T-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T = T-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 递归实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(BiTree &amp;root, KeyType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; x) &#123;</span><br><span class="line">        <span class="built_in">deleteNode</span>(root-&gt;lchild, x);<span class="comment">//往左子树找要删除的结点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;key &lt; x) &#123;</span><br><span class="line">        <span class="built_in">deleteNode</span>(root-&gt;rchild, x);<span class="comment">//往右子树找要删除的结点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//查找到了删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild == <span class="literal">NULL</span>) &#123; <span class="comment">//左子树为空，右子树直接顶上去</span></span><br><span class="line">            BiTree tempNode = root;<span class="comment">//用临时的存着的目的是一会要 free</span></span><br><span class="line">            root = root-&gt;rchild;</span><br><span class="line">            <span class="built_in">free</span>(tempNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;rchild == <span class="literal">NULL</span>) &#123; <span class="comment">//右子树为空，左子树直接顶上去</span></span><br><span class="line">            BiTree tempNode = root;<span class="comment">//临时指针</span></span><br><span class="line">            root = root-&gt;lchild;</span><br><span class="line">            <span class="built_in">free</span>(tempNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//左右子树都不为空</span></span><br><span class="line">            <span class="comment">//一般的删除策略是左子树的最大数据 或 右子树的最小数据 代替要删除的节点(这里采用查找左子树最大数据来代替)</span></span><br><span class="line">            BiTree tempNode = root-&gt;lchild;</span><br><span class="line">            <span class="keyword">while</span> (tempNode-&gt;rchild != <span class="literal">NULL</span>) &#123;<span class="comment">//向右找到最大的</span></span><br><span class="line">                tempNode = tempNode-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">            root-&gt;key = tempNode-&gt;key;<span class="comment">//把 tempNode 对应的值替换到要删除的值的位置上</span></span><br><span class="line">            <span class="built_in">deleteNode</span>(root-&gt;lchild, tempNode-&gt;key);<span class="comment">//删除 tempNode</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树创建，二叉排序树新建，中序遍历，查找，删除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTree T = <span class="literal">NULL</span>;<span class="comment">//树根</span></span><br><span class="line">    BiTree parent;<span class="comment">//存储父亲结点的地址值</span></span><br><span class="line">    BiTree search;</span><br><span class="line">    KeyType str[<span class="number">7</span>] = &#123;<span class="number">54</span>, <span class="number">20</span>, <span class="number">66</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">79</span>, <span class="number">58</span>&#125;;<span class="comment">//将要进入二叉排序树的元素值</span></span><br><span class="line">    <span class="comment">// 创建二叉树</span></span><br><span class="line">    <span class="built_in">createBST</span>(T, str, <span class="number">7</span>);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="built_in">inOrder</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    search = <span class="built_in">searchBST</span>(T, <span class="number">40</span>, parent);</span><br><span class="line">    <span class="keyword">if</span> (search) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到相应的节点=%d\n&quot;</span>, search-&gt;key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建二叉排序树</span></span><br><span class="line">    <span class="built_in">createBSTOrder</span>(T, str, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的二叉树\n&quot;</span>);</span><br><span class="line">    <span class="built_in">inOrder</span>(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 删除某个节点</span></span><br><span class="line">    <span class="built_in">deleteNode</span>(T, <span class="number">40</span>);</span><br><span class="line">    <span class="built_in">inOrder</span>(T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>顺序查找 排序 二分查找</title>
      <link href="/posts/b78c9d72.html"/>
      <url>/posts/b78c9d72.html</url>
      
        <content type="html"><![CDATA[<p>顺序查找 排序 二分查找代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType *elem; <span class="comment">// 整形指针</span></span><br><span class="line">    <span class="type">int</span> length;  <span class="comment">// 存储动态数组里边元素的个数</span></span><br><span class="line">&#125; SSTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initSSTable</span><span class="params">(SSTable &amp;S, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 多申请一个位置，为了存哨兵</span></span><br><span class="line">    S.length = length + <span class="number">1</span>;</span><br><span class="line">    S.elem = (ElemType *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * S.length);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 随机生成数</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="comment">// 因为第0个是哨兵，所以从第1个开始随机</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; S.length; i++) &#123;</span><br><span class="line">        S.elem[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printST</span><span class="params">(SSTable S)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从1开始打印，0是哨兵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; S.length; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, S.elem[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">selSSTable</span><span class="params">(SSTable S, ElemType e)</span> </span>&#123;</span><br><span class="line">    S.elem[<span class="number">0</span>] = e;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 方式一循环</span></span><br><span class="line"><span class="comment">//    for (i = S.length - 1; S.elem[i] != e; i--);</span></span><br><span class="line"><span class="comment">//    return i;</span></span><br><span class="line">    <span class="comment">// 方式二循环</span></span><br><span class="line">    <span class="keyword">for</span> (i = S.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (S.elem[i] == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找 时间复杂度 logN</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(SSTable L, ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, mid, high = L.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (L.elem[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;<span class="comment">//等于就找到了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (L.elem[mid] &gt; key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *left, <span class="type">const</span> <span class="type">void</span> *right)</span> </span>&#123;<span class="comment">//left，right 是任意两个元素的地址值</span></span><br><span class="line">    <span class="keyword">return</span> *(ElemType *) left - *(ElemType *) right;</span><br><span class="line">    <span class="comment">//return *(ElemType*)right - *(ElemType*)left;//从大到小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序查找 折半查找（二分查找）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SSTable S;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="built_in">initSSTable</span>(S, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="built_in">printST</span>(S);</span><br><span class="line">    <span class="comment">// 顺序查找，输入要查找的元素</span></span><br><span class="line">    ElemType key;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的元素\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line">    <span class="type">int</span> index = <span class="built_in">selSSTable</span>(S, key);</span><br><span class="line">    <span class="keyword">if</span> (index) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;查找元素的位置为：%d\n&quot;</span>, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序 qsort 实现的是快排</span></span><br><span class="line">    <span class="built_in">qsort</span>(S.elem, S.length, <span class="built_in">sizeof</span>(ElemType), compare);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的顺序是\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printST</span>(S);</span><br><span class="line">    <span class="comment">// 二分查找</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的值\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">binarySearch</span>(S, key);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;查找成功 位置为 %d\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;查找失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树层次建树前序中序后序遍历层序遍历代码</title>
      <link href="/posts/225d868e.html"/>
      <url>/posts/225d868e.html</url>
      
        <content type="html"><![CDATA[<p>二叉树的建树，层次建树，深度优先遍历，广度优先遍历</p><p>二叉树前序、中序、后序遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个二叉树结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> BiElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span> &#123;</span><br><span class="line">    BiElemType c;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiTNode</span> *lchild;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiTNode</span> *rchild;</span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tag结构体是辅助队列使用的</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tag</span> &#123;</span><br><span class="line">    BiTree p; <span class="comment">// 树的某一个节点的地址值</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tag</span> *pnext;</span><br><span class="line">&#125; <span class="type">tag_t</span>, *<span class="type">ptag_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历，深度优先遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否满足条件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class="line">        <span class="built_in">preOrder</span>(p-&gt;lchild); <span class="comment">// 打印左子树</span></span><br><span class="line">        <span class="built_in">preOrder</span>(p-&gt;rchild); <span class="comment">// 打印右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否满足条件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != p) &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;lchild); <span class="comment">// 打印左子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;rchild); <span class="comment">// 打印右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">posOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否满足条件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != p) &#123;</span><br><span class="line">        <span class="built_in">posOrder</span>(p-&gt;lchild); <span class="comment">// 打印左子树</span></span><br><span class="line">        <span class="built_in">posOrder</span>(p-&gt;rchild); <span class="comment">// 打印右子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列</span></span><br><span class="line"><span class="keyword">typedef</span> BiTree ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkNode</span> *next;</span><br><span class="line">&#125; LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    LinkNode *front, *rear;</span><br><span class="line">&#125; LinkQueue; <span class="comment">// 先进先出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = (LinkNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 头指针指向</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmptyQueue</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队，尾插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enQueue</span><span class="params">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class="line">    LinkNode *p = (LinkNode *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;   <span class="comment">// next指向NULL</span></span><br><span class="line">    Q.rear-&gt;next = p; <span class="comment">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class="line">    Q.rear = p;       <span class="comment">// rear要指向新的尾部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队,头部删除方法</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断队列为空</span></span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkNode *p = Q.front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;<span class="comment">//断链</span></span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p) &#123;<span class="comment">//删除的是最后一个元素</span></span><br><span class="line">        Q.rear = Q.front;<span class="comment">//队列置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次遍历、层序便来，广度优先遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    <span class="built_in">initQueue</span>(Q);</span><br><span class="line">    BiTree p; <span class="comment">// 存储出队的节点</span></span><br><span class="line">    <span class="comment">// 把根节点入队</span></span><br><span class="line">    <span class="built_in">enQueue</span>(Q, T);</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmptyQueue</span>(Q)) &#123;</span><br><span class="line">        <span class="built_in">deQueue</span>(Q, p);</span><br><span class="line">        <span class="built_in">putchar</span>(p-&gt;c);  <span class="comment">// 等价于 printf(&quot;%c&quot;,c);</span></span><br><span class="line">        <span class="comment">// 入队</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">enQueue</span>(Q, p-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">enQueue</span>(Q, p-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的建树，层次建树</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTree pnew; <span class="comment">// 申请一个树的新节点</span></span><br><span class="line">    BiTree tree = <span class="literal">NULL</span>;  <span class="comment">// 指向树根，代表树</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="comment">// phead就是队列头，ptail就是队列尾</span></span><br><span class="line">    <span class="type">ptag_t</span> phead = <span class="literal">NULL</span>, ptail = <span class="literal">NULL</span>, listpnew = <span class="literal">NULL</span>, pcur;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 读到换行结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// calloc申请的空间大小是两个参数直接相乘，并对空间进行初始化，赋值为0</span></span><br><span class="line">        pnew = (BiTree) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">        <span class="comment">// 数据放进去</span></span><br><span class="line">        pnew-&gt;c = c;</span><br><span class="line">        <span class="comment">// 给队列申请空间</span></span><br><span class="line">        listpnew = (<span class="type">ptag_t</span>) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(<span class="type">tag_t</span>));</span><br><span class="line">        listpnew-&gt;p = pnew;</span><br><span class="line">        <span class="comment">// 如果是树的第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == tree) &#123;</span><br><span class="line">            tree = pnew;  <span class="comment">// tree指向树的根节点</span></span><br><span class="line">            phead = listpnew; <span class="comment">// 第一个节点即是队列头，也是队列尾</span></span><br><span class="line">            ptail = listpnew; <span class="comment">// 队列尾</span></span><br><span class="line">            pcur = listpnew; <span class="comment">// pcur 要指向要进入树的父亲元素</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 让元素先入队列</span></span><br><span class="line">            ptail-&gt;pnext = listpnew;</span><br><span class="line">            ptail = listpnew;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == pcur-&gt;p-&gt;lchild) &#123;</span><br><span class="line">                pcur-&gt;p-&gt;lchild = pnew; <span class="comment">// 左孩子为空，就放入左孩子</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">NULL</span> == pcur-&gt;p-&gt;rchild) &#123;</span><br><span class="line">                pcur-&gt;p-&gt;rchild = pnew;</span><br><span class="line">                pcur = pcur-&gt;pnext; <span class="comment">//当前节点左右孩子都有了，pcur就指向下一个</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二叉树前序、中序、后续遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------------preOrder()----------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">preOrder</span>(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------------inOrder()-----------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">inOrder</span>(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 后续遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------------posOrder()-----------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">posOrder</span>(tree);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 层次遍历，广度优先遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------------levelOrder()-----------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">levelOrder</span>(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++栈队列代码</title>
      <link href="/posts/ab1e3f0.html"/>
      <url>/posts/ab1e3f0.html</url>
      
        <content type="html"><![CDATA[<p>新建一个栈，读取标准输入 3 个整数 3 4 5，入栈 3 4 5，依次出栈，打印 5 4 3，新建循环队列（Maxsize 为 5），<br>读取标准输入 3 4 5 6 7，入队 7 时，队满，打印 false，然后依次出队，输出 3 4 5 6<br>Input<br>读取标准输入，内容依次是 3 4 5，换行后，接着是 3 4 5 6 7<br>Output<br>如果输入是 3 4 5，换行，接着是 3 4 5 6 7，那么输出是<br>5 4 3<br>false<br>3 4 5 6<br>注意每个数字占用两个字符的位置，5 之前是有一个空格的，第三行的 3 之前也是有一个空格的</p><p>栈、队列出队入队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 定义栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize]; <span class="comment">// 数组</span></span><br><span class="line">    <span class="type">int</span> top; <span class="comment">// 始终指向栈顶的一个变量</span></span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;<span class="comment">//代表栈为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(SqStack &amp;S, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>) &#123;<span class="comment">//数组的大小不能改变，避免访问越界</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S.data[++S.top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(SqStack &amp;S, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == S.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = S.data[S.top--];<span class="comment">//后减减，x=S.data[S.top];S.top=S.top-1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个循环队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front, rear;<span class="comment">// 队列头 队列尾</span></span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue &amp;Q, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MaxSize == Q.front) &#123; <span class="comment">// 判断是否队满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.data[Q.rear] = x;</span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue &amp;Q, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.rear == Q.front) &#123; <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = Q.data[Q.front]; <span class="comment">// 先进先出</span></span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqStack S; <span class="comment">// 先进后出</span></span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    ElemType m; <span class="comment">// 用来存放拿出来的元素</span></span><br><span class="line">    <span class="comment">// 初始化栈</span></span><br><span class="line">    <span class="built_in">initStack</span>(S);</span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="type">int</span> i, num;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%2d&quot;</span>, &amp;num);</span><br><span class="line">        <span class="built_in">push</span>(S, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">pop</span>(S, m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化队列</span></span><br><span class="line">    SqQueue Q;</span><br><span class="line">    <span class="built_in">initQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)<span class="comment">//入队 5 个元素，最后一个元素不会入队成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        flag = <span class="built_in">enQueue</span>(Q, num);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> == flag) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ElemType element;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//出队 4 个元素并打印每一个</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">deQueue</span>(Q, element);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令最全总结</title>
      <link href="/posts/5b03ebe5.html"/>
      <url>/posts/5b03ebe5.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、文件和命令"><a href="#一、文件和命令" class="headerlink" title="一、文件和命令"></a>一、文件和命令</h3><h4 id="1、cd-命令"><a href="#1、cd-命令" class="headerlink" title="1、cd 命令"></a>1、cd 命令</h4><p>（它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径）</p><ul><li><p>cd &#x2F;home进入 ‘&#x2F; home’ 目录</p></li><li><p>cd ..                返回上一级目录</p></li><li><p>cd ..&#x2F;..             返回上两级目录</p></li><li><p>cd &#x2F;                 返回跟目录</p></li><li><p>cd -                 返回上次所在的目录</p></li><li><p><code>mkdir</code> &lt;目录名&gt;  创建目录</p></li><li><p><code>mkdir dir1 dir2</code>   同时创建两个目录</p></li><li><p><code>mkdir -p  /tmp/dir1/dir2</code>   递归创建目录树</p></li><li><p><code>rm -f file1</code>  删除’file1’⽂件</p></li><li><p><code>rmdir dir1</code>  删除’dir1’⽬录</p></li><li><p><code>rm -rf dir1</code>  删除’dir1’⽬录和其内容</p></li><li><p><code>rm -rf dir1 dir2</code>  同时删除两个⽬录及其内容</p></li></ul><h4 id="2、pwd-命令"><a href="#2、pwd-命令" class="headerlink" title="2、pwd 命令"></a>2、pwd 命令</h4><p><code>pwd</code> 显示工作路径</p><h4 id="3、ls-命令"><a href="#3、ls-命令" class="headerlink" title="3、ls 命令"></a>3、ls 命令</h4><ul><li>ls 查看目录中的文件</li><li>ls -l 显示文件和目录的详细资料</li><li>ls -a 列出全部文件，包含隐藏文件</li><li>ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</li><li>ls -lSr  查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</li><li>tree  查看⽂件和⽬录的树形结构 （如果没有需要先安装 yum install tree）</li><li>ls -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</li><li>ls -al &#x2F;proc&#x2F;pid&#x2F;exe   通过pid查询程序正在运行的路径</li></ul><h4 id="4、cp-命令"><a href="#4、cp-命令" class="headerlink" title="4、cp 命令"></a>4、cp 命令</h4><p>（用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下）</p><ul><li>-a   将文件的特性一起复制</li><li>-p   连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</li><li>-i   若目标文件已经存在时，在覆盖时会先询问操作的进行</li><li>-r   递归持续复制，用于目录的复制行为</li><li>-u   目标文件与源文件有差异时才会复制</li><li><code>cp dir/* .</code>  复制某目录下的所有文件至当前目录</li><li><code>cp -a dir1 dir2</code> 复制目录</li><li><code>cp -a /temp/dir1 .</code>   复制一个目录至当前目录</li><li><code>ln -s file1 link1</code>  创建指向⽂件&#x2F;⽬录的软链接</li><li><code>ln file1 lnk1</code>  创建指向⽂件&#x2F;⽬录的物理链接</li><li><code>touch -t 0712250000 file1</code> 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</li></ul><h4 id="5、mv-命令"><a href="#5、mv-命令" class="headerlink" title="5、mv 命令"></a>5、mv 命令</h4><ul><li>-f   force强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li><li>-i   若目标文件已经存在，就会询问是否覆盖</li><li>-u   若目标文件已经存在，且比目标文件新，才会更新</li><li><code>mv old_dir new_dir</code>  重命名&#x2F;移动⽬录</li></ul><h4 id="6、rm-命令"><a href="#6、rm-命令" class="headerlink" title="6、rm 命令"></a>6、rm 命令</h4><ul><li>-f ：就是force的意思，忽略不存在的文件，不会出现警告消息</li><li>-i ：互动模式，在删除前会询问用户是否操作</li><li>-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</li></ul><h3 id="二、查看文件内容"><a href="#二、查看文件内容" class="headerlink" title="二、查看文件内容"></a>二、查看文件内容</h3><h4 id="7、cat-命令"><a href="#7、cat-命令" class="headerlink" title="7、cat 命令"></a>7、cat 命令</h4><p>（用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用）</p><ul><li><code>cat file1</code> 从第一个字节开始正向查看文件的内容</li><li><code>cat -n file1</code> 标示文件的行数</li><li><code>cat xxx.txt</code>   awk ‘NR%2&#x3D;&#x3D;1’</li><li><code>tac file1</code> 从最后一行开始反向查看一个文件的内容</li><li><code>more file1</code> 查看一个长文件的内容</li><li><code>less file1</code>  类似 more 命令，但允许方向操作</li><li><code>head -n 2 file1</code> 查看一个文件的前两行</li><li><code>tail -f /log/msg</code>  实时查看添加到⽂件中的内容</li><li><code>tail -n 2 file1</code> 查看一个文件的最后两行</li><li><code>tail -n +1000 file1</code> 从1000行开始显示，显示1000行以后的</li><li><code>cat filename | head -n 3000 | tail -n +1000</code> 显示1000行到3000行</li><li><code>cat filename | tail -n +3000 | head -n 1000</code> 从第3000行开始，显示1000(即显示3000~3999行)</li><li><code>grep ss hello.txt</code>  在⽂件hello.txt中查找关键词 ss </li><li><code>grep ^s hello.txt </code>  在⽂件hello.txt中查找以 s 开头的内容</li><li><code>grep [0-9] hello.txt</code>  选择hello.txt⽂件中所有包含数字的⾏</li><li><code>sed &#39;s/ss/mm/g&#39; hello.txt</code>  将hello.txt⽂件中的 ss 替换成 mm</li><li><code>sed &#39;/^$/d&#39; hello.txt </code>  从hello.txt⽂件中删除所有空⽩⾏</li><li><code>sed &#39;/ *#/d; /^$/d&#39; hello.txt </code>  从hello.txt⽂件中删除所有注释和空⽩⾏</li><li><code>sed -e &#39;1d&#39; hello.txt</code>   从⽂件hello.txt 中排除第⼀⾏</li><li><code>sed -n &#39;/s1/p&#39; hello.txt </code>  查看只包含关键词”s1”的⾏</li><li><code>sed -e &#39;s/ *$//&#39; hello.txt</code>  删除每⼀⾏最后的空⽩字符</li><li><code>sed -e &#39;s/s1//g&#39; hello.txt</code>  从⽂档中只删除词汇s1并保留剩余全部</li><li><code>sed -n &#39;1,5p;5q&#39; hello.txt</code>  查看从第⼀⾏到第5⾏内容</li><li><code>sed -n &#39;5p;5q&#39; hello.txt</code>  查看第5⾏</li><li><code>paste file1 file2</code>  合并两个⽂件或两栏的内容</li><li><code>paste -d &#39;+&#39; file1 file2 </code>  合并两个⽂件或两栏的内容，中间⽤”+”区分</li><li><code>sort file1 file2</code>  排序两个⽂件的内容</li><li><code>sort file1 file2</code>   uniq</li><li><code>sort file1 file2</code>   uniq -u</li><li><code>sort file1 file2</code>   uniq -d</li><li><code>comm -1 file1 file2 </code>  ⽐较两个⽂件的内容(去除’file1’所含内容)</li><li><code>comm -2 file1 file2</code>  ⽐较两个⽂件的内容(去除’file2’所含内容)</li><li><code>comm -3 file1 file2</code>  ⽐较两个⽂件的内容(去除两⽂件共有部分)</li></ul><h3 id="三、文件搜索"><a href="#三、文件搜索" class="headerlink" title="三、文件搜索"></a>三、文件搜索</h3><h4 id="8、find-命令"><a href="#8、find-命令" class="headerlink" title="8、find 命令"></a>8、find 命令</h4><ul><li><code>find / -name file</code> 从根目录开始搜索文件&#x2F;目录</li><li><code>find / -user user1</code>  搜索用户 user1 的文件&#x2F;目录</li><li><code>find /dir -name *.bin</code>  在目录&#x2F;dir 中搜索带有 .bin 后缀的文件</li><li><code>find / -name file1</code> 从 ‘&#x2F;‘ 开始进入根文件系统搜索文件和目录（完整文件或文件名）</li><li><code>find / -user user1</code> 搜索属于用户 ‘user1’ 的文件和目录</li><li><code>find /usr/bin -type f -atime +100</code> 搜索在过去100天内未被使用过的执行文件</li><li><code>find /usr/bin -type f -mtime -10</code> 搜索在10天内被创建或者修改过的文件</li><li><code>find . -regex &#39;.*\(net\|comm\).*&#39;</code>  ‘-regex’ 选项匹配整个路径名，出当前目录树中所有文件名中任意位置包含字符串 net 或 comm 的文件</li><li><code>locate *.mp4</code>  寻找 .mp4结尾的文件</li><li>whereis &lt;关键词&gt; 显示某⼆进制⽂件&#x2F;可执⾏⽂件的路径</li><li><code>whereis halt</code> 显示一个二进制文件、源码或man的位置</li><li>which &lt;关键词&gt;   查找系统⽬录下某的⼆进制⽂件</li><li><code>which halt</code> 显示一个二进制文件或可执行文件的完整路径</li></ul><h3 id="四、文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#四、文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="四、文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>四、文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><h4 id="9、chmod-命令"><a href="#9、chmod-命令" class="headerlink" title="9、chmod 命令"></a>9、chmod 命令</h4><ul><li><code>ls -lh</code> 显示当前目录所有文件的权限</li><li><code>chmod 777</code> 文件名  修改文件权限（最高权限）</li><li><code>chmod ugo+rwx dir</code> 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r，4 ）、写(w，2)和执行(x，1)的权限</li><li><code>chmod go-rwx dir1</code> 删除群组(g)与其他人(o)对目录的读写执行权限</li><li>chmod <strong>u</strong>+s &#x2F;bin&#x2F;file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</li><li>chmod <strong>u</strong>-s &#x2F;bin&#x2F;file1 禁用一个二进制文件的 SUID位</li><li><code>chmod g+s /home/public</code> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</li><li><code>chmod g-s /home/public</code> 禁用一个目录的 SGID 位</li><li>chmod <strong>o</strong>+t &#x2F;home&#x2F;public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</li><li>chmod <strong>o</strong>-t &#x2F;home&#x2F;public 禁用一个目录的 STIKY 位</li><li>chmod +<strong>x</strong> 文件路径 为所有者、所属组和其他用户添加执行的权限</li><li>chmod -<strong>x</strong> 文件路径 为所有者、所属组和其他用户删除执行的权限</li><li>chmod <strong>u</strong>+<strong>x</strong> 文件路径 为所有者添加执行的权限</li><li>chmod g+<strong>x</strong> 文件路径 为所属组添加执行的权限</li><li><code>chmod o+x</code> 文件路径 为其他用户添加执行的权限</li><li><code>chmod ug+x</code> 文件路径 为所有者、所属组添加执行的权限</li><li><code>chmod =wx</code> 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</li><li><code>chmod ug=wx</code> 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</li></ul><h4 id="10、chown-命令"><a href="#10、chown-命令" class="headerlink" title="10、chown 命令"></a>10、chown 命令</h4><p>（改变文件的所有者）</p><ul><li><code>chown user1 file1</code> 改变一个文件的所有人属性</li><li><code>chown -R user1 dir1</code> 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</li><li><code>chown user1:group1 file1</code> 改变一个文件的所有人和群组属性</li></ul><h4 id="11、chgrp-命令"><a href="#11、chgrp-命令" class="headerlink" title="11、chgrp 命令"></a>11、chgrp 命令</h4><p>（改变文件所属用户组）</p><ul><li><code>chgrp group1 file1</code> 改变文件的群组</li></ul><h3 id="五、文本处理"><a href="#五、文本处理" class="headerlink" title="五、文本处理"></a>五、文本处理</h3><h4 id="12、grep-命令"><a href="#12、grep-命令" class="headerlink" title="12、grep 命令"></a>12、grep 命令</h4><p>（分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等）</p><ul><li><code>grep Aug /var/log/messages</code> 在文件 ‘&#x2F;var&#x2F;log&#x2F;messages’中查找关键词”Aug”</li><li><code>grep ^Aug /var/log/messages</code> 在文件 ‘&#x2F;var&#x2F;log&#x2F;messages’中查找以”Aug”开始的词汇</li><li><code>grep [0-9] /var/log/messages</code> 选择 ‘&#x2F;var&#x2F;log&#x2F;messages’ 文件中所有包含数字的行</li><li><code>grep Aug -R /var/log/*</code> 在目录 ‘&#x2F;var&#x2F;log’ 及随后的目录中搜索字符串”Aug”</li><li><code>sed &#39;s/stringa1/stringa2/g&#39; example.txt</code> 将example.txt文件中的 “string1” 替换成 “string2”</li><li><code>sed &#39;/^$/d&#39; example.txt</code> 从example.txt文件中删除所有空白行</li></ul><h4 id="13、paste-命令"><a href="#13、paste-命令" class="headerlink" title="13、paste 命令"></a>13、paste 命令</h4><ul><li><code>paste file1 file2</code> 合并两个文件或两栏的内容（查看两文件合并后的内容）</li><li><code>paste -d &#39;+&#39; file1 file2</code> 合并两个文件或两栏的内容，中间用”+”区分</li></ul><h4 id="14、sort-命令"><a href="#14、sort-命令" class="headerlink" title="14、sort 命令"></a>14、sort 命令</h4><ul><li><code>sort file1 file2</code> 排序两个文件的内容</li><li><code>sort file1 file2 | uniq</code> 取出两个文件的并集(重复的行只保留一份)</li><li><code>sort file1 file2 | uniq -u</code> 删除交集，留下其他的行</li><li><code>sort file1 file2 | uniq -d</code> 取出两个文件的交集(只留下同时存在于两个文件中的文件)</li></ul><h4 id="15、comm-命令"><a href="#15、comm-命令" class="headerlink" title="15、comm 命令"></a>15、comm 命令</h4><ul><li><code>comm -1 file1 file2</code> 比较两个文件的内容只删除 ‘file1’ 所包含的内容</li><li><code>comm -2 file1 file2</code> 比较两个文件的内容只删除 ‘file2’ 所包含的内容</li><li><code>comm -3 file1 file2</code> 比较两个文件的内容只删除两个文件共有的部</li></ul><h3 id="六、打包和压缩文件"><a href="#六、打包和压缩文件" class="headerlink" title="六、打包和压缩文件"></a>六、打包和压缩文件</h3><h4 id="16、tar-命令"><a href="#16、tar-命令" class="headerlink" title="16、tar 命令"></a>16、tar 命令</h4><p>&#x3D;&#x3D;对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压）推荐&#x3D;&#x3D;（重新整理）</p><ul><li>-c ：新建打包文件</li><li>-t ：查看打包文件的内容含有哪些文件名</li><li>-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中</li><li>-j ：通过bzip2的支持进行压缩&#x2F;解压缩</li><li>-z ：通过gzip的支持进行压缩&#x2F;解压缩</li><li>-v ：在压缩&#x2F;解压缩过程中，将正在处理的文件名显示出来</li><li>-f filename ：filename为要处理的文件</li><li>-C dir ：指定压缩&#x2F;解压缩的目录dir</li><li>压缩：<code>tar -jcv -f filename.tar.bz2</code> 要被处理的文件或目录名称</li><li>查询：<code>tar -jtv -f filename.tar.bz2</code></li><li>解压：<code>tar -jxv -f filename.tar.bz2 -C</code> 欲解压缩的目录</li><li><code>bunzip2 file1.bz2</code> 解压一个叫做 ‘file1.bz2’的文件</li><li><code>bzip2 file1</code> 压缩一个叫做 ‘file1’ 的文件</li><li><code>gunzip file1.gz</code> 解压一个叫做 ‘file1.gz’的文件</li><li><code>gzip file1</code> 压缩一个叫做 ‘file1’的文件</li><li><code>gzip -9 file1</code> 最大程度压缩</li><li><code>rar a file1.rar test_file</code> 创建一个叫做 ‘file1.rar’ 的包</li><li><code>rar a file1.rar file1 file2 dir1</code> 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</li><li><code>rar x file1.rar</code> 解压rar包</li><li><code>zip file1.zip file1</code> 创建一个zip格式的压缩包</li><li><code>unzip file1.zip</code> 解压一个zip格式压缩包</li><li><code>zip -r file1.zip file1 file2 dir1</code> 将几个文件和目录同时压缩成一个zip格式的压缩包</li></ul><h3 id="七、进程相关的命令"><a href="#七、进程相关的命令" class="headerlink" title="七、进程相关的命令"></a>七、进程相关的命令</h3><h4 id="17、ps-命令"><a href="#17、ps-命令" class="headerlink" title="17、ps 命令"></a>17、ps 命令</h4><p>用于将某个时间点的进程运行情况选取下来并输出，process之意</p><ul><li>-A ：所有的进程均显示出来</li><li>-a ：不与terminal有关的所有进程</li><li>-u ：有效用户的相关进程</li><li>-x ：一般与a参数一起使用，可列出较完整的信息</li><li>-l ：较长，较详细地将PID的信息列出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -ef <span class="comment"># 显示所有进程的详细信息。</span></span><br><span class="line">ps aux <span class="comment"># 查看系统所有的进程数据</span></span><br><span class="line">ps ax <span class="comment"># 查看不与terminal有关的所有进程</span></span><br><span class="line">ps -lA <span class="comment"># 查看系统所有的进程数据</span></span><br><span class="line">ps axjf <span class="comment"># 查看连同一部分进程树状态</span></span><br><span class="line">netstat -lntp <span class="comment"># 查看各个节点及进程</span></span><br></pre></td></tr></table></figure><h4 id="18、kill-命令"><a href="#18、kill-命令" class="headerlink" title="18、kill 命令"></a>18、kill 命令</h4><ul><li>kill -9 pid  （-9表示强制关闭）</li><li>kill -9 程序的名字</li><li>kill - </li><li>pkill 程序的名字</li></ul><h4 id="19、Vim-下复制粘贴等操作"><a href="#19、Vim-下复制粘贴等操作" class="headerlink" title="19、Vim 下复制粘贴等操作"></a>19、Vim 下复制粘贴等操作</h4><ul><li><p>x,X : 在一行中，x为向后删除一个字符（相当于del键），X为向前删除一个字符（相当于backspace键）</p></li><li><p>dd : 删除光标所在的那一整行</p></li><li><p>ndd : n 为数字。从光标开始，删除向下n列</p></li><li><p>yy : 复制光标所在的那一行</p></li><li><p>nyy : n为数字。复制光标所在的向下n行</p></li><li><p>p,P : p 为将已复制的数据粘贴到光标的下一行，P则为贴在光标的上一行</p></li><li><p>u : 复原前一个操作</p></li><li><p>CTRL + r : 重做上一个操作</p></li><li><p>小数点 ‘.’：重复前一个动作</p></li><li><p>:set number :在每一行设置行标号</p></li><li><p>:n1,n2 m n3 移动n1-n2行(包括n1,n2)到n3行之下</p></li><li><p>:n1,n2 co n3 复制n1-n2行(包括n1,n2)到n3行之下</p></li><li><p>:n1,n2 d 删除n1-n2行(包括n1,n2)行</p></li></ul><h3 id="系统常用命令"><a href="#系统常用命令" class="headerlink" title="系统常用命令"></a>系统常用命令</h3><h4 id="关机、注销、重启"><a href="#关机、注销、重启" class="headerlink" title="关机、注销、重启"></a>关机、注销、重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">查看进程端口号：netstat -tunlp|grep 端口号 </span><br><span class="line">ss -tnl  查看正在已使用的端口</span><br><span class="line">shutdown -h now 关闭系统(1) 即刻关机</span><br><span class="line">shutdown -h 10 10分钟后关机</span><br><span class="line">shutdown -h 11:00  11:00 关机</span><br><span class="line">shutdown -h +10 预定时间关机（10分钟后关机）</span><br><span class="line">shutdown -c  取消指定时间关机</span><br><span class="line">shutdown -f now 重启</span><br><span class="line">shutdown -r 10  10分钟后重启</span><br><span class="line">shutdown -r 11:00   定时重启</span><br><span class="line">reboot 重启</span><br><span class="line">init 6 重启</span><br><span class="line">init 0 即刻关机</span><br><span class="line">telinit 0 关机</span><br><span class="line">poweroff   立刻关机</span><br><span class="line">halt 关机</span><br><span class="line"><span class="built_in">sync</span>  buff数据同步到磁盘</span><br><span class="line"><span class="built_in">logout</span> 退出登录Shell</span><br><span class="line">time 测算一个命令（即程序）的执行时间</span><br></pre></td></tr></table></figure><h3 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统的详细信息</span></span><br><span class="line">lsb_release -a</span><br><span class="line"><span class="comment"># 查看内核/OS/CPU信息</span></span><br><span class="line"><span class="built_in">uname</span> -a </span><br><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line"><span class="built_in">uname</span> -r</span><br><span class="line"><span class="comment"># 查看处理器架构</span></span><br><span class="line"><span class="built_in">uname</span> -m</span><br><span class="line"><span class="comment"># 查看处理器架构</span></span><br><span class="line"><span class="built_in">arch</span></span><br><span class="line"><span class="comment"># 查看主机名称</span></span><br><span class="line">hostname</span><br><span class="line"><span class="comment"># 显示当前登录系统的用户</span></span><br><span class="line"><span class="built_in">who</span></span><br><span class="line"><span class="comment"># 显示登陆时的用户名</span></span><br><span class="line"><span class="built_in">who</span> am i</span><br><span class="line"><span class="comment"># 显示当前用户名</span></span><br><span class="line"><span class="built_in">whoami</span></span><br><span class="line"><span class="comment"># 查看 linux 版本信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/version</span><br><span class="line"><span class="comment"># 查看 CPU 信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo</span><br><span class="line"><span class="comment"># 查看中断</span></span><br><span class="line"><span class="built_in">cat</span> /proc/interrupts</span><br><span class="line"><span class="comment"># 查看系统负载</span></span><br><span class="line"><span class="built_in">cat</span> /proc/loadavg</span><br><span class="line"><span class="comment"># 查看系统运行时间、用户数、负载</span></span><br><span class="line"><span class="built_in">uptime</span></span><br><span class="line"><span class="comment"># 查看系统的环境便令</span></span><br><span class="line"><span class="built_in">env</span></span><br><span class="line"><span class="comment"># 查看系统PCI设备信息</span></span><br><span class="line">lspci -tv</span><br><span class="line"><span class="comment"># 查看已加载的系统模块</span></span><br><span class="line">lsmod</span><br><span class="line"><span class="comment"># 查看内存总量</span></span><br><span class="line">grep MemTotal /proc/meminfo</span><br><span class="line"><span class="comment"># 查看空闲内存量</span></span><br><span class="line">grep MemFree /proc/meminfo</span><br><span class="line"><span class="comment"># 查看内存用量和交换区用量</span></span><br><span class="line">free -m</span><br><span class="line"><span class="comment"># 显示系统时间</span></span><br><span class="line"><span class="built_in">date</span></span><br><span class="line"><span class="comment"># 显示2021日历表</span></span><br><span class="line">cal 2021</span><br><span class="line"><span class="comment"># 动态显示cpu/内存/进程情况</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># 每1秒采一次系统状态，采20次</span></span><br><span class="line">vmstat 1 20 </span><br><span class="line"><span class="comment"># 查看io读写/cpu使用情况</span></span><br><span class="line">iostat</span><br><span class="line"><span class="comment"># 查看 cpu 使用情况（1秒1次，共10次）</span></span><br><span class="line">sar -u 1 10</span><br><span class="line"><span class="comment"># 查询磁盘性能</span></span><br><span class="line">sar -d 1 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出占用内存资源最多的前 10 个进程</span></span><br><span class="line">ps -auxf | <span class="built_in">sort</span> -nr -k 4 | <span class="built_in">head</span> -10</span><br><span class="line"><span class="comment"># 找出占用 CPU 资源最多的前 10 个进程</span></span><br><span class="line">ps -auxf | <span class="built_in">sort</span> -nr -k 3 | <span class="built_in">head</span> -10</span><br></pre></td></tr></table></figure><h3 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所属有磁盘分区</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 查看所有交换分区</span></span><br><span class="line">swapon -s</span><br><span class="line"><span class="comment"># 查看磁盘使用情况及挂载点</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="comment"># 查看磁盘使用情况及挂载点</span></span><br><span class="line"><span class="built_in">df</span> -hl</span><br><span class="line"><span class="comment"># 查看指定某个目录大小</span></span><br><span class="line"><span class="built_in">du</span> -sh /dir</span><br><span class="line"><span class="comment"># 从高到底依次显示文件和目录大小</span></span><br><span class="line"><span class="built_in">du</span> -sk * | <span class="built_in">sort</span> -rn</span><br><span class="line"><span class="comment"># 查看内存</span></span><br><span class="line">free -h</span><br><span class="line"><span class="comment"># 查看CPUs</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂在hda2盘</span></span><br><span class="line">mount /dev/hda2 /mnt/hda2</span><br><span class="line"><span class="comment"># 指定⽂件系统类型挂载（如ntfs）</span></span><br><span class="line">mount -t ntfs /dev/sdc1 /mnt/usbhd1</span><br><span class="line"><span class="comment"># 挂载iso⽂件</span></span><br><span class="line">mount -o loop xxx.iso /mnt/cdrom</span><br><span class="line"><span class="comment"># 挂载usb盘/闪存设备</span></span><br><span class="line">mount /dev/sda1 /mnt/usbdisk</span><br><span class="line"><span class="comment"># 通过设备名卸载</span></span><br><span class="line">umount -v /dev/sda1</span><br><span class="line"><span class="comment"># 通过挂载点卸载</span></span><br><span class="line">umount -v /mnt/mymnt</span><br><span class="line"><span class="comment"># 强制卸载(慎⽤)</span></span><br><span class="line">fuser -km /mnt/hda1</span><br></pre></td></tr></table></figure><h3 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">useradd ss</span><br><span class="line"><span class="comment"># 查看所用系统用户</span></span><br><span class="line"><span class="built_in">cut</span> -d: -f1 /etc/passwd</span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">userdel -r ss</span><br><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">groupadd group_name</span><br><span class="line"><span class="comment"># 查看系统所有组</span></span><br><span class="line"><span class="built_in">cut</span> -d: -f1 /etc/group</span><br><span class="line"><span class="comment"># 删除用户组</span></span><br><span class="line">groupdel group_name</span><br><span class="line"><span class="comment"># 修改用户的组</span></span><br><span class="line">usermod -g group_name user_name</span><br><span class="line"><span class="comment"># 将用户添加到组</span></span><br><span class="line">usermod -aG group_name user_name</span><br><span class="line"><span class="comment"># 修改用户 ss 的登录 Shell、主目录及用户组</span></span><br><span class="line">usermod -s /bin/ksh -d /home/codepig –g dev ss</span><br><span class="line"><span class="comment"># 查看 ss 用户所在的组</span></span><br><span class="line"><span class="built_in">groups</span> ss</span><br><span class="line"><span class="comment"># 切换到另一个用户环境</span></span><br><span class="line">su user_name</span><br><span class="line"><span class="comment"># 修改口令</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line">passwd ss</span><br><span class="line"><span class="comment"># 查看用户活动</span></span><br><span class="line">w</span><br><span class="line"><span class="comment"># 查看指定用户 ss 的信息</span></span><br><span class="line"><span class="built_in">id</span> ss</span><br><span class="line"><span class="comment"># 查看用户登录日志</span></span><br><span class="line">last</span><br><span class="line"><span class="comment"># 查看当前用户的计划任务</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h3 id="网络和进程管理"><a href="#网络和进程管理" class="headerlink" title="网络和进程管理"></a>网络和进程管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络接口属性</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment"># 查看某网卡的配置</span></span><br><span class="line">ifconfig eth0</span><br><span class="line"><span class="comment"># 查看路由表</span></span><br><span class="line">route -n</span><br><span class="line"><span class="comment"># 查看所有监听端⼝</span></span><br><span class="line">netstat -lntp</span><br><span class="line"><span class="comment"># 查看已经建立连接的TCP连接</span></span><br><span class="line">netstat -antp</span><br><span class="line"><span class="comment"># 查看TCP/UDP的状态信息</span></span><br><span class="line">netstat -lutp</span><br><span class="line"><span class="comment"># 启⽤eth0⽹络设备</span></span><br><span class="line">ifup eth0</span><br><span class="line"><span class="comment"># 禁⽤eth0⽹络设备</span></span><br><span class="line">ifdown eth0</span><br><span class="line"><span class="comment"># 查看iptables规则</span></span><br><span class="line">iptables -L</span><br><span class="line"><span class="comment"># 配置ip地址</span></span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0</span><br><span class="line"><span class="comment"># 以dhcp模式启⽤eth0</span></span><br><span class="line">dhclient eth0</span><br><span class="line"><span class="comment"># 配置默认⽹关</span></span><br><span class="line">route add -net 0/0 gw Gateway_IP</span><br><span class="line"><span class="comment"># 配置静态路由到达⽹络&#x27;192.168.0.0/16&#x27;</span></span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</span><br><span class="line"><span class="comment"># 删除静态路由</span></span><br><span class="line">route del 0/0 gw Gateway_IP</span><br><span class="line"><span class="comment"># 查看主机名</span></span><br><span class="line">hostname</span><br><span class="line"><span class="comment"># 解析主机名</span></span><br><span class="line">host 主机名  例如：host www.baidu.com</span><br><span class="line"><span class="comment"># 查询DNS记录，查看域名解析是否正常</span></span><br><span class="line">nslookup 主机名  例如：nslookup wwww.baidu.com</span><br><span class="line"><span class="comment"># 查看所有进程</span></span><br><span class="line">ps -ef</span><br><span class="line"><span class="comment"># 过滤出你需要的进程</span></span><br><span class="line">ps -ef|grep redis</span><br><span class="line"><span class="comment"># kill指定名称的进程</span></span><br><span class="line"><span class="built_in">kill</span> -s name</span><br><span class="line"><span class="comment"># kill指定pid的进程</span></span><br><span class="line"><span class="built_in">kill</span> -s pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡机制实现用户无感更新服务</title>
      <link href="/posts/d1d4b46a.html"/>
      <url>/posts/d1d4b46a.html</url>
      
        <content type="html"><![CDATA[<p>项目用户数量比较多时，项目发布时用户不能访问，对用户来说体验很不好，对企业来说来说也是一种损失，如何无感知平滑稳定的升级，下面开始介绍。</p><p>当前文章用的方法是，后端服务器配置多个节点：在 <code>Nginx</code> 配置中使用反向代理配置将流量分发到这些后端服务器。下面是通过备用节点的方式实现，也可以通过调整反向代理的权重，逐渐将流量从旧版本的服务节点转移到新版本的服务节点实现。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>前后端项目部署可参考：<a href="https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA">手把手教你部署前后端分离项目</a></p><h3 id="后端节点部署"><a href="#后端节点部署" class="headerlink" title="后端节点部署"></a>后端节点部署</h3><p>后端部署三个节点，一个用于备用节点，分别在服务器项目目录下依次执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar ruoyi-admin.jar --server.port=8080 &gt;nohup.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar ruoyi-admin.jar --server.port=8081 &gt;nohup1.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">nohup</span> java -jar ruoyi-admin.jar --server.port=8082 &gt;nohup2.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>查看是否启动成功，一种是直接查看 <code>nuhuo.out</code> 日志，另一种是浏览器访问 <code>http://ip:8080/swagger-ui/index.html</code> 出现接口文档地址则说明成功</p><h3 id="配置-upstream"><a href="#配置-upstream" class="headerlink" title="配置 upstream"></a>配置 upstream</h3><p>添加 <code>backup</code> 表示这台服务器是备用服务器，只有其他服务器都停机时才会启用，更新节点也是利用这一特点</p><p>upstream 中节点 down 之后，会自动剔除，新的请求会分配到正常能访问的节点</p><p><code>weight=2</code> 表示权重占比为 <code>2/3</code>，每 3 次请求会转发 2 次到这台服务器上</p><p><code>weight=1</code> 表示权重占比为 <code>1/3</code>，每 3 次请求会转发 1 次到这台服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    <span class="comment"># 权重为2，max_fails=3 fail_timeout=20s表示最大失败3次，20s之内则不会向该节点发送请求</span></span><br><span class="line">    server localhost:8080 weight=2 max_fails=3 fail_timeout=20s;</span><br><span class="line">    server localhost:8081 weight=1;</span><br><span class="line">    server localhost:8082 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-proxy-pass-代理地址"><a href="#修改-proxy-pass-代理地址" class="headerlink" title="修改 proxy_pass 代理地址"></a>修改 proxy_pass 代理地址</h3><p>代理地址替换为 <code>upstream</code> 后的 <code>backend</code> 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://backend/;</span><br></pre></td></tr></table></figure><h3 id="重启-Nginx"><a href="#重启-Nginx" class="headerlink" title="重启 Nginx"></a>重启 Nginx</h3><ol><li><p>这里是用 <code>tar</code> 包安装的，在 <code>sbin</code>目录下， 检查 <code>nginx</code> 配置是否正确，输入 <code>./nginx -t</code>，出现下列内容则说明配置是正确的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun sbin]<span class="comment"># ./nginx -t</span></span><br><span class="line">nginx: the configuration file /data/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /data/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure></li><li><p>重启 <code>nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问项目默地址登录之后，这里是 <a href="http://ip,每次请求/">http://ip，每次请求</a> <code>nohup.out</code> 都会有日志打印，把 8080 和 8081 的服务都停掉，你会发现 8082 的服务才启用，这是 8082 服务会接收所有请求的流量</p><p>依次替换项目包进行升级，重新启动服务即可</p><p><code>Nginx</code> 域名证书配置可参考：<a href="https://mp.weixin.qq.com/s/cWQlbMJNm0Uw6ssp7BWErw">服务器 Nginx 配置域名和证书</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器Nginx配置域名和证书</title>
      <link href="/posts/7ee9b5.html"/>
      <url>/posts/7ee9b5.html</url>
      
        <content type="html"><![CDATA[<p>项目开发完成后，将项目部署到服务器上时，为了保证安全性和加密通信，我们通常会配置 <code>Nginx</code> 作为反向代理服务器，并使用域名证书启用 <code>HTTPS</code>。下面将为你指导 <code>Nginx</code> 如何配置域名和证书。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>域名准备，提前准备好域名或重新申请一个新的域名，域名解析到你部署项目的服务器。下载好<code> Nginx</code> 对应的证书，这里我用的阿里云，一个域名可以申请 20 个免费的证书（推荐）。</p><p>前后端项目部署可参考这篇文章：<a href="https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA">手把手教你部署前后端分离项目</a></p><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><p>在安装 <code>Nginx</code> 的目录下创建一个 <code>ssl</code> 的文件夹，证书一开始下载后是一个 <code>zpi</code> 的压缩包，上传解压修改证书配置对应的目录即可。</p><p>有些服务器没有 <code>zip</code> 和 <code>unzip</code> 的以来和命令，执行以下一行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zip unzip</span><br></pre></td></tr></table></figure><h3 id="配置-ssl-及证书"><a href="#配置-ssl-及证书" class="headerlink" title="配置 ssl 及证书"></a>配置 ssl 及证书</h3><p>ssl 配置说明，修改 <code>linsten</code> 对应的端口和 <code>server_name</code> 对应的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改监听的端口，注意不要忘了加 ssl</span></span><br><span class="line">listen  443 default ssl;</span><br><span class="line"><span class="comment"># 域名可以有多个，用逗号隔开</span></span><br><span class="line">server_name  xxxxx.top;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置域名证书</span></span><br><span class="line">ssl_certificate         /data/nginx/ssl/sjy.pem; </span><br><span class="line">ssl_certificate_key     /data/nginx/ssl/sjy.key;</span><br><span class="line"><span class="comment"># 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）</span></span><br><span class="line">ssl_session_cache  shared:SSL:1m;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  SSL 会话的过期时间 默认5分钟</span></span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line"><span class="comment"># SSL/TLS 协议版本，可以指定多个，以空格分开</span></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class="line"><span class="comment"># 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off</span></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"><span class="comment"># 加密算法的优先顺序</span></span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br></pre></td></tr></table></figure><h3 id="Nginx-完整配置"><a href="#Nginx-完整配置" class="headerlink" title="Nginx 完整配置"></a>Nginx 完整配置</h3><p>可直接使用，修改对应的文件目录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 开启gzip压缩</span></span><br><span class="line"> gzip on;</span><br><span class="line"> <span class="comment"># 不压缩临界值，大于1K的才压缩，一般不用改</span></span><br><span class="line"> gzip_min_length 1k;</span><br><span class="line"> <span class="comment"># 压缩缓冲区</span></span><br><span class="line"> gzip_buffers 16 64K;</span><br><span class="line"> <span class="comment"># 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line"> gzip_http_version 1.1;</span><br><span class="line"> <span class="comment"># 压缩级别，1-10，数字越大压缩的越好，时间也越长</span></span><br><span class="line"> gzip_comp_level 5;</span><br><span class="line"> <span class="comment"># 进行压缩的文件类型</span></span><br><span class="line"> gzip_types text/plain application/x-javascript text/css application/xml application/javascript;</span><br><span class="line"> <span class="comment"># 跟Squid等缓存服务有关，on的话会在Header里增加&quot;Vary: Accept-Encoding&quot;</span></span><br><span class="line"> gzip_vary on;</span><br><span class="line"> <span class="comment"># IE6对Gzip不怎么友好，不给它Gzip了</span></span><br><span class="line"> gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 配置 80 端口</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">  <span class="comment"># 域名可以有多个，用逗号隔开,把 xxxx 替换成对应域名即可，不许加 http www</span></span><br><span class="line">  server_name  xxxxx.com; </span><br><span class="line">  <span class="comment"># HTTP 自动跳转 HTTPS</span></span><br><span class="line">  rewrite ^(.*) https://$server_name<span class="variable">$1</span> permanent;</span><br><span class="line">  charset utf-8;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">            root   /data/pro/front/ruoyi-ui;</span><br><span class="line">   try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  location /prod-api/ &#123;</span><br><span class="line">   proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">   proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">   proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">   proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">   proxy_pass http://localhost:8080/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">         error_page   500 502 503 504  /50x.html;</span><br><span class="line">         location = /50x.html &#123;</span><br><span class="line">         root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 配置 443 端口</span></span><br><span class="line"> server &#123;</span><br><span class="line">        listen  443 default ssl;</span><br><span class="line">  <span class="comment"># 域名可以有多个，用逗号隔开，把 xxxx 替换成对应域名即可，不许加 http www</span></span><br><span class="line">  server_name  xxxxx.com;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 配置域名证书</span></span><br><span class="line">        ssl_certificate         /data/nginx/ssl/sjy.pem; </span><br><span class="line">        ssl_certificate_key     /data/nginx/ssl/sjy.key;</span><br><span class="line">        <span class="comment"># 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）</span></span><br><span class="line">        ssl_session_cache  shared:SSL:1m;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#  SSL 会话的过期时间 默认5分钟</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        <span class="comment"># SSL/TLS 协议版本，可以指定多个，以空格分开</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class="line">        <span class="comment"># 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        <span class="comment"># 加密算法的优先顺序</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        proxy_set_header    Host                  <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header    X-Real-IP             <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header    X-Forwarded-For       <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">     proxy_set_header    X-Forwarded-Proto     <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">            root   /data/pro/front/ruoyi-ui;</span><br><span class="line">   try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  location /prod-api/ &#123;</span><br><span class="line">   proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">   proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">   proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">   proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">   proxy_pass http://localhost:8080/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">         location = /50x.html &#123;</span><br><span class="line">         root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换配置后，重新加载一个 <code>nginx.conf</code> 的配置文件，浏览器能正常访问则说明配置成功</p><h3 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先进入 nginx 可执行文件目录，我这是是安装到 /data/nginx/sbin 目录下</span></span><br><span class="line"><span class="built_in">cd</span> /data/nginx/sbin</span><br><span class="line">./nginx  <span class="comment"># 启动</span></span><br><span class="line">./nginx -s stop  <span class="comment"># 停止(暴力停止服务)</span></span><br><span class="line">./nginx -s quit  <span class="comment"># 安全退出(优雅停止服务)</span></span><br><span class="line">./nginx -s reload  <span class="comment"># 重新加载配置文件</span></span><br><span class="line">./nginx -h <span class="comment"># 帮助命令</span></span><br><span class="line">./nginx -t <span class="comment"># 检查配置文件</span></span><br><span class="line">/data/nginx/conf/nginx.conf <span class="comment"># nginx配置文件路径</span></span><br><span class="line">ps aux|grep nginx  <span class="comment"># 查看nginx进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++队列的链式存储代码实现</title>
      <link href="/posts/32dfacd1.html"/>
      <url>/posts/32dfacd1.html</url>
      
        <content type="html"><![CDATA[<p>队列的链式存储代码实现</p><p>队列初始化、判断是否为空、入队尾插法、出队头部删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkNode</span>* next;</span><br><span class="line">&#125; LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    LinkNode *front, *rear;</span><br><span class="line">&#125; LinkQueue; <span class="comment">// 先进先出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 头指针指向</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q.front-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队，尾插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enQueue</span><span class="params">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class="line">    LinkNode* p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;   <span class="comment">// next指向NULL</span></span><br><span class="line">    Q.rear-&gt;next = p; <span class="comment">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class="line">    Q.rear = p;       <span class="comment">// rear要指向新的尾部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出队,头部删除方法</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断队列为空</span></span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkNode *p = Q.front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    Q.front-&gt;next=p-&gt;next;<span class="comment">//断链</span></span><br><span class="line">    <span class="keyword">if</span>(Q.rear==p)&#123;<span class="comment">//删除的是最后一个元素</span></span><br><span class="line">        Q.rear=Q.front;<span class="comment">//队列置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部删除，尾部入队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">    <span class="comment">// 初始化队列</span></span><br><span class="line">    <span class="built_in">initQueue</span>(Q);</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    ret = <span class="built_in">isEmpty</span>(Q);</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列不为空\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 入队，尾插法</span></span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    ElemType e;</span><br><span class="line">    ret = <span class="built_in">deQueue</span>(Q,e);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;出队元素：%d\n&quot;</span>,e);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;出队失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成验证码的两种方式（开箱即用）</title>
      <link href="/posts/2c1c94fc.html"/>
      <url>/posts/2c1c94fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="通用公共配置"><a href="#通用公共配置" class="headerlink" title="通用公共配置"></a>通用公共配置</h2><p>生成验证码的两种方式，SpringBoot项目，下面是完整代码，直接就可以用</p><h3 id="公共依赖"><a href="#公共依赖" class="headerlink" title="公共依赖"></a>公共依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis 缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- pool 对象池，springboot2.x以后用得是lettuce,添加连接池依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方法二需要用到的jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-application-yml-文件"><a href="#配置-application-yml-文件" class="headerlink" title="配置 application.yml 文件"></a>配置 <code>application.yml</code> 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># 地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment"># 端口，默认为6379</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 数据库索引</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池的最大数据库连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br></pre></td></tr></table></figure><h3 id="公共常量"><a href="#公共常量" class="headerlink" title="公共常量"></a>公共常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统缓存常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KAPTCHA_KEY</span> <span class="operator">=</span> <span class="string">&quot;ss:kaptcha&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">REDIS_EXP_TIME</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">KAPTCHA_EXP_TIME</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">3L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码宽高常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">WIDTH</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">HEIGHT</span> <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片后缀名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMG_JPG</span> <span class="operator">=</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMG_PNG</span> <span class="operator">=</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMG_JPEG</span> <span class="operator">=</span> <span class="string">&quot;jpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis-序列化配置"><a href="#Redis-序列化配置" class="headerlink" title="Redis 序列化配置"></a>Redis 序列化配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">// 为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis-工具类"><a href="#Redis-工具类" class="headerlink" title="Redis 工具类"></a>Redis 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(RedisUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value    缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout  时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisUtils expire(String key,long time) failure.&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisUtils hasKey(String key) failure.&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisUtils set(String key,Object value) failure.&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisUtils set(String key,Object value,long time) failure.&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用返回结果封装"><a href="#通用返回结果封装" class="headerlink" title="通用返回结果封装"></a>通用返回结果封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作消息提醒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Object&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CODE_TAG</span> <span class="operator">=</span> <span class="string">&quot;code&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MSG_TAG</span> <span class="operator">=</span> <span class="string">&quot;msg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATA_TAG</span> <span class="operator">=</span> <span class="string">&quot;data&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一个新创建的 AjaxResult 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  返回内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(CODE_TAG, code);</span><br><span class="line">        <span class="built_in">super</span>.put(MSG_TAG, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一个新创建的 AjaxResult 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  返回内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(CODE_TAG, code);</span><br><span class="line">        <span class="built_in">super</span>.put(MSG_TAG, msg);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(data)) &#123;</span><br><span class="line">            <span class="built_in">super</span>.put(DATA_TAG, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;操作成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 返回内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成功消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  返回内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(HttpStatus.OK.value(), msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回错误消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回错误消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 返回内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 警告消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回错误消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  返回内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 警告消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(HttpStatus.INTERNAL_SERVER_ERROR.value(), msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回错误消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  返回内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 警告消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方便链式调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法一：Graphics2D-画图实现"><a href="#方法一：Graphics2D-画图实现" class="headerlink" title="方法一：Graphics2D 画图实现"></a>方法一：Graphics2D 画图实现</h2><p>使用 jdk 画图 Graphics2D 生成验证码</p><h3 id="1、验证码工具类"><a href="#1、验证码工具类" class="headerlink" title="1、验证码工具类"></a>1、验证码工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入BufferedImage对象，并将生成好的验证码保存到BufferedImage中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">drawRandomText</span><span class="params">(BufferedImage bufferedImage, <span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">graphics</span> <span class="operator">=</span> (Graphics2D) bufferedImage.getGraphics();</span><br><span class="line">        <span class="comment">// 验证码背景色</span></span><br><span class="line">        graphics.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">        <span class="comment">// 填充线条背景</span></span><br><span class="line">        graphics.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        graphics.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体,楷体,微软雅黑&quot;</span>, Font.BOLD, <span class="number">35</span>));</span><br><span class="line">        <span class="comment">// 数字和字母的组合</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">baseNumLetter</span> <span class="operator">=</span> <span class="string">&quot;ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 旋转原点的 x 坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        String ch;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            graphics.setColor(getRandomColor());</span><br><span class="line">            <span class="comment">//设置字体旋转角度,角度小于30度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">degree</span> <span class="operator">=</span> random.nextInt() % <span class="number">30</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">dot</span> <span class="operator">=</span> random.nextInt(baseNumLetter.length());</span><br><span class="line">            ch = baseNumLetter.charAt(dot) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            builder.append(ch);</span><br><span class="line">            <span class="comment">//正向旋转</span></span><br><span class="line">            graphics.rotate(degree * Math.PI / <span class="number">180</span>, x, <span class="number">45</span>);</span><br><span class="line">            graphics.drawString(ch, x, <span class="number">45</span>);</span><br><span class="line">            <span class="comment">//反向旋转</span></span><br><span class="line">            graphics.rotate(-degree * Math.PI / <span class="number">180</span>, x, <span class="number">45</span>);</span><br><span class="line">            <span class="comment">// 字母间距记录</span></span><br><span class="line">            x += <span class="number">35</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 画干扰线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 设置随机颜色</span></span><br><span class="line">            graphics.setColor(getRandomColor());</span><br><span class="line">            <span class="comment">// 随机画线</span></span><br><span class="line">            graphics.drawLine(random.nextInt(width), random.nextInt(height), random.nextInt(width), random.nextInt(height));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">            graphics.setColor(getRandomColor());</span><br><span class="line">            graphics.fillRect(x1, y1, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机取色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title function_">getRandomColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">ran</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(ran.nextInt(<span class="number">256</span>), ran.nextInt(<span class="number">256</span>), ran.nextInt(<span class="number">256</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Controller-控制层"><a href="#2、Controller-控制层" class="headerlink" title="2、Controller 控制层"></a>2、Controller 控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerificationController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码生成工具，返回图片信息</span></span><br><span class="line"><span class="comment">     * 适合学习练手使用，redis 呢能存在一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getImageCode&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getImageCode</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 禁止缓存</span></span><br><span class="line">        response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store, no-cache, must-revalidate&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;post-check=0, pre-check=0&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置响应格式为png图片</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成图片验证码</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomText</span> <span class="operator">=</span> VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        redisUtils.set(ConstantCode.KAPTCHA_KEY, randomText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        ImageIO.write(image, ConstantCode.IMG_JPG, out);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码 Base64</span></span><br><span class="line"><span class="comment">     * 可生成多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getCaptchaInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getCaptchaInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">success</span> <span class="operator">=</span> Result.success();</span><br><span class="line">        <span class="comment">// 生成图片验证码</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyKey</span> <span class="operator">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomText</span> <span class="operator">=</span> VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        redisUtils.set(verifyKey, randomText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class="line">        <span class="comment">// 转换流信息写出</span></span><br><span class="line">        <span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        success.put(<span class="string">&quot;uuid&quot;</span>, uuid);</span><br><span class="line">        success.put(<span class="string">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二：kaptcha-依赖实现"><a href="#方法二：kaptcha-依赖实现" class="headerlink" title="方法二：kaptcha 依赖实现"></a>方法二：kaptcha 依赖实现</h2><h3 id="1、验证码配置"><a href="#1、验证码配置" class="headerlink" title="1、验证码配置"></a>1、验证码配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.code.kaptcha.Constants.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptchaBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class="line">        properties.setProperty(KAPTCHA_BORDER, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码图片宽度 默认为200</span></span><br><span class="line">        properties.setProperty(KAPTCHA_IMAGE_WIDTH, <span class="string">&quot;160&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码图片高度 默认为50</span></span><br><span class="line">        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, <span class="string">&quot;60&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符大小 默认为40</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class="string">&quot;38&quot;</span>);</span><br><span class="line">        <span class="comment">// KAPTCHA_SESSION_KEY</span></span><br><span class="line">        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, <span class="string">&quot;kaptchaCode&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符长度 默认为5</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, <span class="string">&quot;Arial,Courier&quot;</span>);</span><br><span class="line">        <span class="comment">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span></span><br><span class="line">        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, <span class="string">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;captchaProducerMath&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptchaBeanMath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class="line">        properties.setProperty(KAPTCHA_BORDER, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">// 边框颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(KAPTCHA_BORDER_COLOR, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码图片宽度 默认为200</span></span><br><span class="line">        properties.setProperty(KAPTCHA_IMAGE_WIDTH, <span class="string">&quot;160&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码图片高度 默认为50</span></span><br><span class="line">        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, <span class="string">&quot;60&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符大小 默认为40</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class="string">&quot;35&quot;</span>);</span><br><span class="line">        <span class="comment">// KAPTCHA_SESSION_KEY</span></span><br><span class="line">        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, <span class="string">&quot;kaptchaCodeMath&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本生成器 注意：KaptchaTextCreator的路径</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_IMPL, <span class="string">&quot;com.test.demo.KaptchaTextCreator&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符间距 默认为2</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字符长度 默认为5</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class="line">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, <span class="string">&quot;Arial,Courier&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码噪点颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(KAPTCHA_NOISE_COLOR, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">        <span class="comment">// 干扰实现类</span></span><br><span class="line">        properties.setProperty(KAPTCHA_NOISE_IMPL, <span class="string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);</span><br><span class="line">        <span class="comment">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span></span><br><span class="line">        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, <span class="string">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、验证码文本生成器"><a href="#2、验证码文本生成器" class="headerlink" title="2、验证码文本生成器"></a>2、验证码文本生成器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.text.impl.DefaultTextCreator;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码文本生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaTextCreator</span> <span class="keyword">extends</span> <span class="title class_">DefaultTextCreator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CNUMBERS = <span class="string">&quot;0,1,2,3,4,5,6,7,8,9,10&quot;</span>.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">suChinese</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomoperands</span> <span class="operator">=</span> (<span class="type">int</span>) Math.round(Math.random() * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (randomoperands == <span class="number">0</span>) &#123;</span><br><span class="line">            result = x * y;</span><br><span class="line">            suChinese.append(CNUMBERS[x]);</span><br><span class="line">            suChinese.append(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            suChinese.append(CNUMBERS[y]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (randomoperands == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(x == <span class="number">0</span>) &amp;&amp; y % x == <span class="number">0</span>) &#123;</span><br><span class="line">                result = y / x;</span><br><span class="line">                suChinese.append(CNUMBERS[y]);</span><br><span class="line">                suChinese.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                suChinese.append(CNUMBERS[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = x + y;</span><br><span class="line">                suChinese.append(CNUMBERS[x]);</span><br><span class="line">                suChinese.append(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">                suChinese.append(CNUMBERS[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (randomoperands == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= y) &#123;</span><br><span class="line">                result = x - y;</span><br><span class="line">                suChinese.append(CNUMBERS[x]);</span><br><span class="line">                suChinese.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                suChinese.append(CNUMBERS[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = y - x;</span><br><span class="line">                suChinese.append(CNUMBERS[y]);</span><br><span class="line">                suChinese.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                suChinese.append(CNUMBERS[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = x + y;</span><br><span class="line">            suChinese.append(CNUMBERS[x]);</span><br><span class="line">            suChinese.append(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">            suChinese.append(CNUMBERS[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        suChinese.append(<span class="string">&quot;=?@&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> suChinese.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、测试正码生成"><a href="#3、测试正码生成" class="headerlink" title="3、测试正码生成"></a>3、测试正码生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Producer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码操作处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Producer captchaProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;captchaProducerMath&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Producer captchaProducerMath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/captchaCharImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getCharCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">ajax</span> <span class="operator">=</span> Result.success();</span><br><span class="line">        <span class="comment">// 生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">capText</span> <span class="operator">=</span> captchaProducerMath.createText();</span><br><span class="line">        <span class="type">String</span> <span class="variable">capStr</span> <span class="operator">=</span> capText.substring(<span class="number">0</span>, capText.lastIndexOf(<span class="string">&quot;@&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> capText.substring(capText.lastIndexOf(<span class="string">&quot;@&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> captchaProducerMath.createImage(capStr);</span><br><span class="line">        <span class="comment">// 保存验证码信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyKey</span> <span class="operator">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class="line">        redisUtils.set(verifyKey, code, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class="line">        <span class="comment">// 转换流信息写出</span></span><br><span class="line">        <span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        ajax.put(<span class="string">&quot;uuid&quot;</span>, uuid);</span><br><span class="line">        ajax.put(<span class="string">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class="line">        <span class="keyword">return</span> ajax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/captchaMathImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getMathCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">ajax</span> <span class="operator">=</span> Result.success();</span><br><span class="line">        <span class="comment">// 生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">capText</span> <span class="operator">=</span> captchaProducer.createText();</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> captchaProducerMath.createImage(capText);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存验证码信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyKey</span> <span class="operator">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class="line">        redisUtils.set(verifyKey, capText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class="line">        <span class="comment">// 转换流信息写出</span></span><br><span class="line">        <span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        ajax.put(<span class="string">&quot;uuid&quot;</span>, uuid);</span><br><span class="line">        ajax.put(<span class="string">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class="line">        <span class="keyword">return</span> ajax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列代码代码实现</title>
      <link href="/posts/e434efff.html"/>
      <url>/posts/e434efff.html</url>
      
        <content type="html"><![CDATA[<p>循环队列代码练习</p><p>初始化队列、判断队列是否为空、入队、出队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环队列代码实战</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize]; <span class="comment">// 数组存储MaxSize-1 个元素</span></span><br><span class="line">    <span class="type">int</span> front, rear; <span class="comment">// 队列头，队列尾</span></span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = <span class="number">0</span>; <span class="comment">// 初始化循环队列，就是让头和尾部都指向零号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Q.front == Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MaxSize == Q.front) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.data[Q.rear] = e; <span class="comment">// 放入元素</span></span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>) % MaxSize; <span class="comment">// rear 要加1，如果大于数组最大下标，回到开头</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断为空</span></span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = Q.data[Q.front]; <span class="comment">//出队</span></span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    <span class="built_in">initQueue</span>(Q);</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">    ret = <span class="built_in">isEmpty</span>(Q);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列不为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">enQueue</span>(Q, <span class="number">5</span>);</span><br><span class="line">    ret = <span class="built_in">enQueue</span>(Q, <span class="number">6</span>);</span><br><span class="line">    ret = <span class="built_in">enQueue</span>(Q, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;入队成功\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;入队失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ElemType elem; <span class="comment">//存储出队元素</span></span><br><span class="line">    ret = <span class="built_in">deQueue</span>(Q, elem);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;出队成功，出队元素：%d\n&quot;</span>, elem);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;出队失败\n&quot;</span>, elem);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">enQueue</span>(Q, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;入队成功\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;入队失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++数据结构单链表代码</title>
      <link href="/posts/669576d7.html"/>
      <url>/posts/669576d7.html</url>
      
        <content type="html"><![CDATA[<p>C++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除</p><p>知道并理解单链表连理，练习并掌握代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    ElemType data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next; <span class="comment">//指针域</span></span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LNode* 是结构体指针，和LinkList完全等价 头插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">linkHeadInsert</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    L = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode)); <span class="comment">// 申请头节点空间，头指针指向头节点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    ElemType x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;  <span class="comment">// 头节点的next,指向新节点；</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">linkTailInsert</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    L = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode)); <span class="comment">// 申请头节点空间，头指针指向头节点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    ElemType x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    LNode *s, *r = L;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s; <span class="comment">// 尾部节点指向新的节点</span></span><br><span class="line">        r = s;  <span class="comment">// 头节点的next,指向新节点；</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位置查找</span></span><br><span class="line"><span class="function">LinkList <span class="title">getElemIndex</span><span class="params">(LinkList L, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &amp;&amp; i &lt; pos) &#123;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找</span></span><br><span class="line"><span class="function">LinkList <span class="title">getLocalElem</span><span class="params">(LinkList L, ElemType value)</span> </span>&#123;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (L) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;data == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (L != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, L-&gt;data);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新节点插入地i个位置</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertFrontList</span><span class="params">(LinkList &amp;L, <span class="type">int</span> pos, ElemType val)</span> </span>&#123;</span><br><span class="line">    LinkList p = <span class="built_in">getElemIndex</span>(L, pos - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkList s;</span><br><span class="line">    s = (LinkList) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = val;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除id对应的元素，删除L 不会变，不需要加引用</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteList</span><span class="params">(LinkList L, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">    LinkList p = <span class="built_in">getElemIndex</span>(L, pos - <span class="number">1</span>); <span class="comment">// 拿到要删除节点的前一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkList q = p-&gt;next; <span class="comment">// 拿到要删除的节点指针</span></span><br><span class="line">    p-&gt;next = q-&gt;next; <span class="comment">// 断链</span></span><br><span class="line">    <span class="built_in">free</span>(q); <span class="comment">// 释放被删除的节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插法新建链表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkList L; <span class="comment">// L是链表头指针，是数据机构的指针类型</span></span><br><span class="line">    <span class="comment">// 头插法</span></span><br><span class="line"><span class="comment">//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表</span></span><br><span class="line"><span class="comment">//    printList(L);</span></span><br><span class="line">    <span class="comment">// 尾插法</span></span><br><span class="line">    <span class="built_in">linkHeadInsert</span>(L);</span><br><span class="line">    <span class="built_in">printList</span>(L);</span><br><span class="line">    <span class="comment">// 按位置查找</span></span><br><span class="line"><span class="comment">//    LinkList linkList = getElemIndex(L, 1);</span></span><br><span class="line"><span class="comment">//    if (linkList != NULL) &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;data=%d\n&quot;, linkList-&gt;data);</span></span><br><span class="line"><span class="comment">//    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;no match&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">// 按位置查找</span></span><br><span class="line"><span class="comment">//    LinkList searchValue = getLocalElem(L, 5);</span></span><br><span class="line"><span class="comment">//    if (searchValue != NULL) &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;data=%d\n&quot;, searchValue-&gt;data);</span></span><br><span class="line"><span class="comment">//    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;no match&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">// 新节点插入地i个位置</span></span><br><span class="line">    <span class="built_in">insertFrontList</span>(L, <span class="number">3</span>, <span class="number">99</span>);</span><br><span class="line">    <span class="built_in">printList</span>(L);</span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="type">bool</span> ret = <span class="built_in">deleteList</span>(L, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用集合初始化方法</title>
      <link href="/posts/5ae5e555.html"/>
      <url>/posts/5ae5e555.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、常规方式"><a href="#1、常规方式" class="headerlink" title="1、常规方式"></a>1、常规方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; languages = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">languages.add(<span class="string">&quot;张&quot;</span>);</span><br><span class="line">languages.add(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">languages.add(<span class="string">&quot;王&quot;</span>);</span><br><span class="line">System.out.println(languages);</span><br></pre></td></tr></table></figure><h2 id="2、Arrays-工具类"><a href="#2、Arrays-工具类" class="headerlink" title="2、Arrays 工具类"></a>2、Arrays 工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; jdks = Arrays.asList(<span class="string">&quot;JDK6&quot;</span>, <span class="string">&quot;JDK8&quot;</span>, <span class="string">&quot;JDK10&quot;</span>);</span><br><span class="line">System.out.println(jdks);</span><br></pre></td></tr></table></figure><p>这种方式添加的是不可变的 List, 即不能添加、删除等操作，需要警惕。。</p><p>如果要可变，那就使用 ArrayList 再包装一下，如下面所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>));</span><br><span class="line">numbers.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">System.out.println(numbers);</span><br></pre></td></tr></table></figure><h2 id="3、Collections-工具类"><a href="#3、Collections-工具类" class="headerlink" title="3、Collections 工具类"></a>3、Collections 工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; apples = Collections.nCopies(<span class="number">3</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line">System.out.println(apples);</span><br></pre></td></tr></table></figure><p>这种方式添加的是不可变的、复制某个元素N遍的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; dogs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Collections.nCopies(<span class="number">3</span>, <span class="string">&quot;dog&quot;</span>));</span><br><span class="line">dogs.add(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">System.out.println(dogs);</span><br></pre></td></tr></table></figure><p>还有初始化单个对象的 List 工具类，这种方式也是不可变的，集合内只能有一个元素，这种也用得很少啊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; cat = Collections.singletonList(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">System.out.println(cat);</span><br></pre></td></tr></table></figure><p>还有一个创建空 List 的工具类，没有默认容量，节省空间，但不知道实际工作中有什么鸟用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; cat = Collections.emptyList(<span class="string">&quot;cat&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4、匿名内部类"><a href="#4、匿名内部类" class="headerlink" title="4、匿名内部类"></a>4、匿名内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    add(<span class="string">&quot;Sally&quot;</span>);</span><br><span class="line">    add(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line">System.out.println(names);</span><br></pre></td></tr></table></figure><h2 id="5、JDK8-Stream"><a href="#5、JDK8-Stream" class="headerlink" title="5、JDK8 Stream"></a>5、JDK8 Stream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; colors = Stream.of(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>).collect(toList());</span><br><span class="line">System.out.println(colors);</span><br></pre></td></tr></table></figure><h2 id="6、JDK-9-List-of"><a href="#6、JDK-9-List-of" class="headerlink" title="6、JDK 9 List.of"></a>6、JDK 9 List.of</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; cups = List.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">System.out.println(cups);</span><br></pre></td></tr></table></figure><h2 id="7、guava"><a href="#7、guava" class="headerlink" title="7、guava"></a>7、guava</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用ImmutableList初始化一个List,是不可变集合，不能进行删除</span><br><span class="line">List&lt;String&gt; list = ImmutableList.of(<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;hollis&quot;</span>, <span class="string">&quot;HollisChuang&quot;</span>, <span class="string">&quot;H&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++数据结构顺序表代码</title>
      <link href="/posts/2f15bdd3.html"/>
      <url>/posts/2f15bdd3.html</url>
      
        <content type="html"><![CDATA[<p>C++数据结构顺序表代码练习</p><p>插入、删除、查找</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">char</span>*&amp; p)</span> </span>&#123;</span><br><span class="line">    p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">fgets</span>(p, <span class="number">100</span>, stdin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType; <span class="comment">// 让顺序表存储其他类型元素时，可以快速修改代码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// 顺序表长度</span></span><br><span class="line">&#125; SqlList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertList</span><span class="params">(SqlList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteList</span><span class="params">(SqlList&amp; L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class="line">        L.data[j<span class="number">-1</span>] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printlist</span><span class="params">(SqlList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// char *p;</span></span><br><span class="line">    <span class="comment">// scanf(&quot;%s&quot;,p);</span></span><br><span class="line">    <span class="comment">// change(p);</span></span><br><span class="line">    <span class="comment">// puts(p);</span></span><br><span class="line">    <span class="comment">// free(p);</span></span><br><span class="line">    SqlList L;</span><br><span class="line">    L.data[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">    L.data[<span class="number">1</span>] = <span class="number">7</span>;</span><br><span class="line">    L.data[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">    L.length = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="comment">// printlist(L);</span></span><br><span class="line">    <span class="type">bool</span> ret = <span class="built_in">insertList</span>(L, <span class="number">2</span>, a);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printlist</span>(L);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);</span><br><span class="line">    <span class="type">bool</span> dd = <span class="built_in">deleteList</span>(L,d);</span><br><span class="line">    <span class="keyword">if</span>(dd)&#123;</span><br><span class="line">        <span class="built_in">printlist</span>(L);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 顺序表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组实现栈的初始化入栈出栈操作</title>
      <link href="/posts/ba62eb1b.html"/>
      <url>/posts/ba62eb1b.html</url>
      
        <content type="html"><![CDATA[<p>数组实现栈的操作</p><p>栈的初始化、入栈、出栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的初始化、入栈、出栈</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>; <span class="comment">// 代表栈为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmptyStack</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == S.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enStack</span><span class="params">(SqStack &amp;S, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>) &#123; <span class="comment">// 栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S.data[++S.top] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == S.top) &#123; <span class="comment">// 栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S.data[S.top--] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getTop</span><span class="params">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == S.top) &#123; <span class="comment">// 栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = S.data[S.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    <span class="built_in">initStack</span>(S);</span><br><span class="line">    flag = <span class="built_in">isEmptyStack</span>(S);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈为空\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="built_in">enStack</span>(S,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">enStack</span>(S,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">enStack</span>(S,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    ElemType  e; <span class="comment">//用于存放获取栈顶的元素</span></span><br><span class="line">    flag = <span class="built_in">getTop</span>(S,e);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈顶元素是：%d\n&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    flag = <span class="built_in">pop</span>(S,e);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;弹出栈顶元素是：%d\n&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List集合去重的五种方法</title>
      <link href="/posts/6f8b73d.html"/>
      <url>/posts/6f8b73d.html</url>
      
        <content type="html"><![CDATA[<h3 id="List-去重的五种方法"><a href="#List-去重的五种方法" class="headerlink" title="List 去重的五种方法"></a>List 去重的五种方法</h3><p><strong>一、借助 Set 的特性进行去重</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 去除重复数据</span></span><br><span class="line"><span class="comment">* 由于Set的无序性，不会保持原来顺序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">distinct</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">sta</span> <span class="operator">=</span> <span class="literal">null</span> != list &amp;&amp; list.size() &gt; <span class="number">0</span>;</span><br><span class="line">    List doubleList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (sta) &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.addAll(list);</span><br><span class="line">        doubleList.addAll(set);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doubleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、利用 Set 集合特性保持顺序一直去重</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set去重并保持原先顺序的两种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delRepeat</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    List&lt;String&gt; listNew = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;String&gt;(list));</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    List&lt;String&gt; listNew2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;(list));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、使用 List 自身方法 remove() -&gt; 不推荐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 去除重复数据(一般不推荐)</span></span><br><span class="line"><span class="comment">* 类似于冒泡排序思想</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">distinct</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != list &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//循环list集合</span></span><br><span class="line">        <span class="keyword">for</span>  ( <span class="type">int</span>  <span class="variable">i</span>  <span class="operator">=</span>   <span class="number">0</span> ; i  &lt;  list.size()  -   <span class="number">1</span> ; i ++ )  &#123;</span><br><span class="line">            <span class="keyword">for</span>  ( <span class="type">int</span>  <span class="variable">j</span>  <span class="operator">=</span>  list.size()  -   <span class="number">1</span> ; j  &gt;  i; j -- )  &#123;</span><br><span class="line">                <span class="comment">// 这里是对象的比较，如果去重条件不一样，在这里修改即可</span></span><br><span class="line">                <span class="keyword">if</span>  (list.get(j).equals(list.get(i)))  &#123;</span><br><span class="line">                    list.remove(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到最新移除重复元素的list</span></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>四、遍历 List 集合，将元素添加到另一个 List 集合中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历后判断赋给另一个list集合，保持原来顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">delRepeat</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">   List&lt;String&gt; listNew = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">   <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!listNew.contains(str)) &#123;</span><br><span class="line">            listNew.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> listNew ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>五、使用 Java8 特性去重</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">delRepeat</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">     List&lt;String&gt; myList = list.stream().distinct().collect(Collectors.toList());</span><br><span class="line">  <span class="keyword">return</span> myList ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个集合快速找出重复数据的两种方法</title>
      <link href="/posts/62af1c5a.html"/>
      <url>/posts/62af1c5a.html</url>
      
        <content type="html"><![CDATA[<p>多个集合快速找出重复数据的两种方法</p><h1 id="多个集合如何取出交集-重复的数据"><a href="#多个集合如何取出交集-重复的数据" class="headerlink" title="多个集合如何取出交集 (重复的数据)"></a>多个集合如何取出交集 (重复的数据)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDuplicates</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法1</span></span><br><span class="line">        List&lt;Integer&gt; list1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        List&lt;Integer&gt; list3 = Arrays.asList(<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list1);</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list2);</span><br><span class="line">        Set&lt;Integer&gt; set3 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list3);</span><br><span class="line"></span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line">        set1.retainAll(set3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;重复元素: &quot;</span> + set1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法2</span></span><br><span class="line">        List&lt;Integer&gt; duplicates = Stream.of(list1, list2, list3)</span><br><span class="line">                .flatMap(Collection::stream)</span><br><span class="line">                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))</span><br><span class="line">                .entrySet()</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(e -&gt; e.getValue() &gt; <span class="number">1</span>)</span><br><span class="line">                .map(Map.Entry::getKey)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;重复元素: &quot;</span> + duplicates);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重复元素: [5]</span><br><span class="line">重复元素: [4, 5, 6, 8]</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>方法1：三个List集合（list1、list2和list3），然后将它们分别转换为Set集合（set1、set2和set3）。接下来，我们使用set1的retainAll()方法依次取交集，并将结果存储回set1中。最后，我们打印出set1中的元素，即为重复出现的元素。</p><p>可以将此代码用于任意数量的列表，只需将它们添加到数组中并转换为Set集合，并使用Set的retainAll()方法依次取交集即可。这种方法是集合依次取交集，list1 和 list3 重复的元素就不能打印出。</p><p>方法2：使用Stream.of()方法将它们转换为一个Stream。接下来，我们使用flatMap()方法将所有元素连接到一个单独的Stream中，并使用groupingBy()方法将它们分组并计算它们的出现次数。然后，我们过滤出出现次数大于1的元素，并使用map()方法将它们转换为一个List集合。最后，我们打印出这个List集合，即为重复出现的元素。</p><p>这种方法的好处是代码简洁、易于阅读和理解，并且在处理大型数据集时具有较好的性能。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux手把手教你部署前端后端分离项目</title>
      <link href="/posts/858c5b5e.html"/>
      <url>/posts/858c5b5e.html</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h3><p><a href="https://mp.weixin.qq.com/s/T3ICzlKbrs4ZpkLvuqQzPA">JDK 安装与环境变量配置</a></p><p><a href="https://mp.weixin.qq.com/s/ow9Yo0y-YS3U_BCO0EloqA">Maven 环境变量配置</a></p><p><a href="https://mp.weixin.qq.com/s/t3f73zj6mdnaU4g94Uj8wA">Nginx 服务器安装配置</a></p><p><a href="https://mp.weixin.qq.com/s/9BgWFnNVoUW7DSHX3jZ5_w">Node 环境变量配置</a></p><p><a href="https://mp.weixin.qq.com/s/gGGe4LsFupahyycQLDL2Ew">Git 安装环境变量配置</a></p><p><a href="https://mp.weixin.qq.com/s/4JZkSOn1Ldz_7FkP2NVgcg">Docker 部署及常用命令</a></p><p><a href="https://mp.weixin.qq.com/s/vtj1GtcwqKzGGr2F_4JASA">Redis 安装及配置</a></p><p><a href="https://mp.weixin.qq.com/s/tx8X4TUufG84kPGon-u7Yg">MySQL 安装及配置</a></p><p>注意：当前 <code>Redis</code> 和 <code>MySQL</code> 是使用 <code>Docker</code> 安装的，<code>Nginx</code> 是 <code>tar</code> 包解压后安装配置</p><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><p>项目用的是 <code>RuoYi-Vue</code> 前后端分离项目， <a href="https://gitee.com/y_project/RuoYi-Vue">Gitee地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd` 进入项目所在文件夹下：`cd /data/pro/</span><br></pre></td></tr></table></figure><p>克隆拉取代码：<code>git clone https://gitee.com/y_project/RuoYi-Vue.git</code></p><h3 id="后端部署"><a href="#后端部署" class="headerlink" title="后端部署"></a>后端部署</h3><ul><li><p>使用 <code>Navicat Premium</code> 连接 <code>MySql</code> 数据库，创建名 <code>ry-vue</code> 的数据库，分别执行项目 <code>sql</code> 文件夹的 <code>quartz.sql</code> 和 <code>ry_20230223.sql</code> 文件</p></li><li><p>修改一些项目的配置文件</p><ol><li><p>MySQL 数据库，修改 <code>MySQL</code> 数据库密码，进入到 <code>resources</code> 文件夹下，<code>/data/pro/RuoYi-Vue/ruoyi-admin/src/main/resources</code>，编辑 <code>application-druid.yml</code> 文件，<code>vim application-druid.yml</code> ，修改密码，数据库名字一致则不用修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 数据源配置</span><br><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        driverClassName: com.mysql.cj.jdbc.Driver</span><br><span class="line">        druid:</span><br><span class="line">            # 主库数据源</span><br><span class="line">            master:</span><br><span class="line">                url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span><br><span class="line">                username: root</span><br><span class="line">                password: 123456</span><br></pre></td></tr></table></figure></li><li><p>Redis 地址信息，编辑 <code>resource</code> 文件夹下 <code>application.yml</code> 文件，修改 <code>redis</code> 连接密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># redis 配置</span><br><span class="line">  redis:</span><br><span class="line">    # 地址</span><br><span class="line">    host: localhost</span><br><span class="line">    # 端口，默认为6379</span><br><span class="line">    port: 6379</span><br><span class="line">    # 数据库索引</span><br><span class="line">    database: 0</span><br><span class="line">    # 密码</span><br><span class="line">    password: 123456</span><br><span class="line">    # 连接超时时间</span><br><span class="line">    timeout: 10s</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        # 连接池中的最小空闲连接</span><br><span class="line">        min-idle: 0</span><br><span class="line">        # 连接池中的最大空闲连接</span><br><span class="line">        max-idle: 8</span><br><span class="line">        # 连接池的最大数据库连接数</span><br><span class="line">        max-active: 8</span><br><span class="line">        # #连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">        max-wait: -1ms</span><br></pre></td></tr></table></figure></li><li><p>文件存放目录，编辑 <code>application.yml</code> 文件，<code>vim application.yml</code> ,修改项目相关配置文件路径地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 项目相关配置</span><br><span class="line">ruoyi:</span><br><span class="line">  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /data/tmp）</span><br><span class="line">  profile: /data/tmp</span><br></pre></td></tr></table></figure></li><li><p>端口号根据自己需求修改，在 <code>application.yml</code> 下修改</p></li></ol></li><li><p>打包，进入到项目文件夹目录下：<code>cd /data/pro/RuoYi-Vue/</code>，执行 <code>maven</code> 打包命令：<code>maven clean package</code> ，第一次需要下载 <code>jar</code> 包，需要等几分钟</p></li><li><p>移动 <code>jar</code> ，进入 <code>target</code> 文件夹下 <code>cd ruoyi-admin/target/</code>，移动 <code>ruoyi-admin.jar</code> 到 <code>/data/pro/backend/</code> ，命令 <code>mv ruoyi-admin.jar /data/pro/backend/</code></p></li><li><p>启动，进入<code>backend</code> 文件夹下，执行  <code>nohup java -jar ruoyi-admin.jar &gt; nohup.out 2&gt;&amp;1 &amp;</code></p><p>查看是否启动成功  <code>tail -200f nohup.out</code></p><p>访问接口文档：<a href="http://ip:8080/swagger-ui/index.html%EF%BC%8C%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%EF%BC%8C%E5%88%99%E8%AF%B4%E6%98%8E%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F">http://ip:8080/swagger-ui/index.html，访问成功，则说明后端接口部署成功</a></p></li></ul><h3 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h3><ul><li><p>安装依赖，进入 ui 页面文件夹下，<code>cd /data/pro/RuoYi-Vue/ruoyi-ui/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装打包依赖</span><br><span class="line">npm install --unsafe-perm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>打包正式环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure><p>如果出现错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building <span class="keyword">for</span> production...Error: error:0308010C:digitat envelope routines::unsupportedat new Hash (node:internal/crypto/hash:67:19)atObject.createHash (node:crypto:135:10)at(/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/util/createHash,js:135:53)module.exportsatNormalModuleinitBuildHash (/data/oro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lb/NormalModule, is:417:16)handleParseError (/data/pro/RuoYi-Vue/ruovi-ui/nodemodules/webpack/ib/NormalModule.js:471:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,js:503:5atat/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,is:358:12at/data/pro/RuoYi-Vue/ruovi-ui/node modules/oader-runner/lib/LoaderRunner,is:373:3atiterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,is:214:10atiterateNormalLoaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:221:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/oader-runner/lib/LoaderRunner.js:236:3atrunSyncOrAsync (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:130:11)iterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:232:2)atArray.&lt;anonymous&gt; (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:205:4)atStorage,finished (/data/pro/Ruoyi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem. is:55:16)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem,js:91:9at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:114</span><br></pre></td></tr></table></figure><p>执行 <code>export NODE_OPTIONS=--openssl-legacy-provider</code> 命令，再次执行 <code>npm run build:prod</code></p></li><li><p>在 <code>/data/pro/front</code> 目录下创建 <code>ruoyi-ui</code> 文件夹，<code>mkdir -p /data/pro/front/ruoyi-ui</code> ，把打包好的 <code>dist</code> 文件夹下的移动到 <code>ruoyi-ui</code> 文件夹下，命令为 <code>mv dist/* /data/pro/front/ruoyi-ui</code></p></li></ul><h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><p>在安装好的 <code>nginx</code> 目录下，<code>/data/nginx2/conf</code> ，把以下 <code>nginx</code> 配置替换到 nginx.conf 文件中重新启动 <code>nginx</code> 即可，<code>nginx</code> 完整配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">user  root; </span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">  charset utf-8;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">            root   /data/pro/front/ruoyi-ui;</span><br><span class="line">   try_files $uri $uri/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  location /prod-api/ &#123;</span><br><span class="line">   proxy_set_header Host $http_host;</span><br><span class="line">   proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">   proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">   proxy_pass http://localhost:8080/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开浏览器，输入：<a href="http://47.103.35.50/">http://47.103.35.50</a> 出现登录页面和验证码则说明前后端都已部署成功</p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器nginx部署及用配常置详解</title>
      <link href="/posts/7e10b77c.html"/>
      <url>/posts/7e10b77c.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>1、tar 压缩包安装，安装 <code>nginx</code> 需要先将官网下载的源码进行编译，编译依赖 <code>gcc</code> 环境，如果没有 <code>gcc</code> 环境，则需要安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p>2、 <code>linux</code> 上安装 <code>pcre</code> 库，<code>PCRE(Perl Compatible Regular Expressions)</code> 是一个 <code>Perl</code> 库，包括 <code>perl</code> 兼容的正则表达式库。<code>nginx</code> 的 <code>http</code> 模块使用 <code>pcre</code> 来解析正则表达式，所以需要在 <code>linux</code> 上安装 <code>pcre</code> 库，<code>pcre-devel</code> 是使用 <code>pcre</code> 开发的一个二次开发库。<code>nginx</code> 也需要此库。命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>3、<code>zlib</code> 安装，<code>zlib</code> 库提供了很多种压缩和解压缩的方式， <code>nginx</code> 使用 <code>zlib</code> 对 <code>http</code> 包的内容进行 <code>gzip</code> ，所以需要在 <code>Centos</code> 上安装 <code>zlib</code> 库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p>4、 在 <code>linux</code> 安装 <code>openssl</code> 库，<code>OpenSSL</code> 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 <code>SSL</code> 协议，并提供丰富的应用程序供测试或其它目的使用。<code>nginx</code> 不仅支持 <code>http</code> 协议，还支持 <code>https</code>（即在 <code>ssl</code> 协议上传输 <code>http</code>），所以需要在 <code>Centos</code> 安装 <code>OpenSSL</code> 库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p>1~4 使用一条命令执行就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>4、进入压缩包所在目录，使用以下命令进行解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure><p>5、使用命令：<code>cd nginx-1.6.2.tar.gz</code>，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，<code>Linux</code> 上使用命令。</p><p>6、使用命令：<code>cd nginx-1.6.2</code>，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，<code>Linux</code> 上使用命令和效果图如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以直接运行 ./configure  命令</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module</span><br></pre></td></tr></table></figure><p>7、在上步的基础上编译并安装，<code>Linux</code> 上使用命令和效果图如下(部分截图)，如果不按以上步骤会有两个错误，重新执行一遍即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br><span class="line"># 安装到指定目录</span><br><span class="line">make &amp;&amp; make PREFIX=/usr/local/nginx install</span><br></pre></td></tr></table></figure><p><strong>将 nginx 加到开机自启</strong>(根据自己需要添加即可)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf &amp;&quot; &gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure><h2 id="卸载nginx"><a href="#卸载nginx" class="headerlink" title="卸载nginx"></a>卸载nginx</h2><p>1、首先通过命令：<code>ps -ef|grep nginx</code>，查看 <code>nginx</code> 运行状态</p><p>2、如果 <code>nginx</code> 处于运行中的状态，使用命令：<code>kill -9</code> 进程号，杀掉进程</p><p>3、全局查找 <code>nginx</code> 相关的文件所处路径，使用以下命令进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name nginx*</span><br></pre></td></tr></table></figure><p>4、根据上一步查询出的 <code>nginx</code> 相关路径，就可以使用以下命令逐一删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># nginx* 代表自该目录起所有的子目录</span><br><span class="line"># 该条命令会删除/usr/local/路径下nginxd的整个文件夹(该文件的子文件都会删除掉)</span><br><span class="line">rm -rf file /usr/local/nginx*</span><br><span class="line"></span><br><span class="line"># 清除依赖</span><br><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure><p>5、通过以上几步，基本可以完全卸载 <code>nginx</code> ，以便重新安装 <code>nginx</code></p><h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 首先进入nginx目录</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">./nginx  # 启动</span><br><span class="line">./nginx -s stop  # 停止(暴力停止服务)</span><br><span class="line">./nginx -s quit  # 安全退出(优雅停止服务)</span><br><span class="line">./nginx -s reload  # 重新加载配置文件</span><br><span class="line">./nginx -h # 帮助命令</span><br><span class="line">./nginx -t # 检查配置文件</span><br><span class="line">/usr/local/nginx/conf/nginx.conf # nginx配置文件路径</span><br><span class="line">ps aux|grep nginx  # 查看nginx进程</span><br></pre></td></tr></table></figure><h2 id="Docker安装部署-nginx"><a href="#Docker安装部署-nginx" class="headerlink" title="Docker安装部署 nginx"></a>Docker安装部署 nginx</h2><p><code>nginx</code> 文件挂载到虚拟机外部</p><p>1、运行 <code>nginx</code> ，把相关配置文件复制宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -p 80:80 -p 443:443 -d nginx:latest</span><br></pre></td></tr></table></figure><p>2、创建挂在的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nginx/conf /data/nginx/log /data/nginx/html /data/nginx/ssl</span><br></pre></td></tr></table></figure><p>3、将容器 <code>nginx.conf</code> 文件复制到宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mynginx:/etc/nginx/nginx.conf /data/nginx/conf/</span><br></pre></td></tr></table></figure><p>4、将容器 <code>conf.d</code> 文件夹下内容复制到宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mynginx:/etc/nginx/conf.d /data/nginx/conf/conf.d</span><br></pre></td></tr></table></figure><p>5、将容器中的 <code>html</code> 文件夹复制到宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mynginx:/usr/share/nginx/html /data/nginx/</span><br></pre></td></tr></table></figure><p>6、强制删除正在运行的 <code>nginx</code>：<code>docker rm -f mynginx</code></p><p>7、重新启动运行 <code>nginx</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -p 80:80 -p 443:443 \</span><br><span class="line">-v /data/nginx/html/:/usr/share/nginx/html \</span><br><span class="line">-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /data/nginx/log:/var/log/nginx \</span><br><span class="line">--privileged=true -e TZ=&quot;Asia/Shanghai&quot; -v /data/nginx/ssl/:/etc/nginx/ssl/:rw \</span><br><span class="line">--restart=always -d nginx:latest</span><br><span class="line"></span><br><span class="line">docker run --name my_nginx -p 80:80 \</span><br><span class="line">-v /usr/local/docker/nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf \</span><br><span class="line">-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /usr/local/docker/nginx/html/:/usr/share/nginx/html/ \</span><br><span class="line">-v /usr/local/docker/nginx/logs/:/var/log/nginx/ \</span><br><span class="line">--privileged=true -d --restart=always nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 停止服务</span><br><span class="line">docker stop mynginx</span><br><span class="line"># 启动服务</span><br><span class="line">docker start mynginx</span><br><span class="line"># 重启服务</span><br><span class="line">docker restart mynginx</span><br><span class="line"># 强制删除并停止</span><br><span class="line">docker rm -f mynginx</span><br></pre></td></tr></table></figure><h2 id="nginx配置说明"><a href="#nginx配置说明" class="headerlink" title="nginx配置说明"></a>nginx配置说明</h2><p><code>nginx</code> 的负载均衡策略有4种：</p><p><strong>轮询(默认)</strong></p><p>最基本的配置方法，它是 <code>upstream</code> 的默认策略，每个请求会按时间顺序逐一分配到不同的后端服务器。</p><p>参数有：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">fail_timeout</td><td align="left">与max_fails结合使用</td></tr><tr><td align="left">max_fails</td><td align="left">设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。</td></tr><tr><td align="left">fail_time</td><td align="left">服务器会被认为停机的时间长度,默认为10s。</td></tr><tr><td align="left">backup</td><td align="left">标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。</td></tr><tr><td align="left">down</td><td align="left">标记服务器永久停机了。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">##定义Nginx运行的用户和用户组。window下不指定</span><br><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line">#nginx进程数,建议设置为等于CPU总核心数.</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]</span><br><span class="line">#error_log  /usr/local/nginx/log/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#进程文件</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除,但是nginx分配请求并不均匀,所以建议与ulimit -n的值保持一致.</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">     #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.</span><br><span class="line">    use epoll;</span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器 </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型</span><br><span class="line"></span><br><span class="line">    #charset utf-8; #默认编码</span><br><span class="line">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class="line">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class="line">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class="line">    client_max_body_size 8m; #设定请求缓</span><br><span class="line">     </span><br><span class="line">    # 开启目录列表访问,合适下载服务器,默认关闭.</span><br><span class="line">    autoindex on; # 显示目录</span><br><span class="line">    autoindex_exact_size on; # 显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB</span><br><span class="line">    autoindex_localtime on; # 显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间</span><br><span class="line">     </span><br><span class="line">    sendfile on; # 开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意：如果图片显示不正常把这个改成off.</span><br><span class="line">    tcp_nopush on; # 防止网络阻塞</span><br><span class="line">    tcp_nodelay on; # 防止网络阻塞</span><br><span class="line">     </span><br><span class="line">    keepalive_timeout 120; # (单位s)设置客户端连接保持活动的超时时间,在超过这个时间后服务器会关闭该链接</span><br><span class="line">     </span><br><span class="line">    # FastCGI相关参数是为了改善网站的性能：减少资源占用,提高访问速度.下面参数看字面意思都能理解.</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line">     </span><br><span class="line">    # gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k; #允许压缩的页面的最小字节数,页面字节数从header偷得content-length中获取.默认是0,不管页面多大都进行压缩.建议设置成大于1k的字节数,小于1k可能会越压越大</span><br><span class="line">    gzip_buffers 4 16k; #表示申请4个单位为16k的内存作为压缩结果流缓存,默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果</span><br><span class="line">    gzip_http_version 1.1; #压缩版本（默认1.1,目前大部分浏览器已经支持gzip解压.前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2; #压缩等级.1压缩比最小,处理速度快.9压缩比最大,比较消耗cpu资源,处理速度最慢,但是因为压缩比最大,所以包最小,传输速度快</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    #压缩类型,默认就已经包含text/html,所以下面就不用再写了,写上去也不会有问题,但是会有一个warn.</span><br><span class="line">    gzip_vary on;#选项可以让前端的缓存服务器缓存经过gzip压缩的页面.例如:用squid缓存经过nginx压缩的数据</span><br><span class="line">     </span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line">   #####################################################################################################</span><br><span class="line"> ##upstream的负载均衡,四种调度算法##</span><br><span class="line">    #调度算法1:轮询.每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动剔除,使用户访问不受影响</span><br><span class="line">    upstream webhost &#123;</span><br><span class="line">        server localhost:8001 max_fails=3 fail_timeout=20s;</span><br><span class="line">        server localhost:8002;</span><br><span class="line">        server localhost:8003 backup;</span><br><span class="line">        server localhost:8003 down;</span><br><span class="line">        server localhost:8003 weight=2;</span><br><span class="line">    &#125;</span><br><span class="line">    #调度算法2:weight(权重).可以根据机器配置定义权重.权重越高被分配到的几率越大</span><br><span class="line">    upstream webhost &#123;</span><br><span class="line">        server localhost:8001 weight=2;</span><br><span class="line">        server localhost:8002 weight=3;</span><br><span class="line">    &#125;</span><br><span class="line">    #调度算法3:ip_hash. 每个请求按访问IP的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在的session共享问题</span><br><span class="line">    upstream webhost &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server localhost:8001;</span><br><span class="line">        server localhost:8002;</span><br><span class="line">    &#125;</span><br><span class="line">    #调度算法4:url_hash(需安装第三方插件).此方法按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.Nginx本身是不支持url_hash的,如果需要使用这种调度算法,必须安装Nginx 的hash软件包</span><br><span class="line">    upstream webhost &#123;</span><br><span class="line">        server localhost:8001;</span><br><span class="line">        server localhost:8002;</span><br><span class="line">        hash $request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   # 如果要监听两个端口需要添加server内容</span><br><span class="line">   server &#123;</span><br><span class="line">    </span><br><span class="line">        listen       8080;</span><br><span class="line">        # 域名可以有多个,用空格隔开</span><br><span class="line">        server_name  127.0.0.1;</span><br><span class="line">        server_name baidu.com;</span><br><span class="line">        # HTTP 自动跳转 HTTPS</span><br><span class="line">        # rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/local/java/ry-v/qd;</span><br><span class="line">   try_files $uri $uri/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #代理头</span><br><span class="line">  location /prod-api/ &#123;</span><br><span class="line">   proxy_set_header Host $http_host;</span><br><span class="line">   proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">   proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">   # 后端代理地址</span><br><span class="line">   proxy_pass http://101.133.170.222:8080/;</span><br><span class="line">   # 多个路径部署 proxy_pass http://wenhost/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> #虚拟主机的配置</span><br><span class="line">    server &#123;</span><br><span class="line">    </span><br><span class="line">        listen       80;</span><br><span class="line">        # 域名可以有多个,用空格隔开</span><br><span class="line">        server_name baidu.com;</span><br><span class="line">        # HTTP 自动跳转 HTTPS</span><br><span class="line">        rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location /prod-api/ &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # </span><br><span class="line">    HTTPS server</span><br><span class="line">    #</span><br><span class="line">    # 监听端口 HTTPS</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line">        </span><br><span class="line">        #ssl_certificate ./ssl/[server_name].pem; # 指定证书的位置，Linux上可以设置相对路径，Windows上要设置绝对路径</span><br><span class="line">        #ssl_certificate_key ./ssl/[server_name].key; # 同上 </span><br><span class="line">        #ssl_trusted_certificate ./ssl/[server_name].cer;</span><br><span class="line">          </span><br><span class="line">        # 配置域名证书</span><br><span class="line">        ssl_certificate         ./ssl/fullchain.cer; </span><br><span class="line">        ssl_certificate_key     ./ssl/[server_name].key;</span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        </span><br><span class="line">        proxy_set_header    Host                  $host;</span><br><span class="line">        proxy_set_header    X-Real-IP             $remote_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;</span><br><span class="line">     proxy_set_header    X-Forwarded-Proto     $scheme;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">          proxy_connect_timeout 1;</span><br><span class="line">          proxy_pass http://www.nginx.cn;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # 配置地址拦截转发，解决跨域验证问题</span><br><span class="line">        location /oauth/&#123;</span><br><span class="line">            proxy_pass https://localhost:8080/oauth/;</span><br><span class="line">            proxy_set_header HOST $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        # JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">        # 日志格式设定</span><br><span class="line">        log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">        &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">        &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class="line">        # 定义本虚拟主机的访问日志</span><br><span class="line">        access_log /usr/local/nginx/log/access.log access;</span><br><span class="line">        </span><br><span class="line">        # 设定查看Nginx状态的地址.StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file conf/htpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生.</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 404 500 502 503 504 /50x.html;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">nohup` 后台守护进程方式运行项目：`nohup java -jar project.jar &gt;nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="nginx常用命令-1"><a href="#nginx常用命令-1" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 首先进入nginx目录</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">./nginx  # 启动</span><br><span class="line">./nginx -s stop  # 停止(暴力停止服务)</span><br><span class="line">./nginx -s quit  # 安全退出(优雅停止服务)</span><br><span class="line">./nginx -s reload  # 重新加载配置文件</span><br><span class="line">./nginx -h # 帮助命令</span><br><span class="line">./nginx -t # 检查配置文件</span><br><span class="line">/usr/local/nginx/conf/nginx.conf # nginx配置文件路径</span><br><span class="line">ps aux|grep nginx  # 查看nginx进程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器redis部署</title>
      <link href="/posts/24593a1d.html"/>
      <url>/posts/24593a1d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis安装和配置"><a href="#Redis安装和配置" class="headerlink" title="Redis安装和配置"></a>Redis安装和配置</h2><p>1、首先在官网下载好<code>redis-6.0.9.tar.gz</code> <a href="https://redis.io/">http://redis.io/</a></p><p>2、下载使用上传到阿里云，这里时放到  <code>/usr/localhost/java/ </code> 目录下</p><p>3、进入到 <code>/usr/localhost/java/ </code>目录，开始解压安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-6.0.9.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入到redis-6.0.9目录执行make命令</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#注意：这里执行make的时候可能会报错，这是可能没有gcc的原因，需要安装，命令为</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次执行make命令，执行时先清除上次没安装成功的一些make内容</span></span><br><span class="line">make distclean</span><br><span class="line">make </span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：这里gcc版本过低，也会导致安装不成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看gcc版本</span></span><br><span class="line">gcc -v  </span><br><span class="line"><span class="comment">#升级gcc版本，依次执行已下命令升级gcc</span></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"><span class="comment">#以上为临时使用，需要长期使用需要执行一下命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure><p>4、安装完成之后会默认在<code>/usr/local/bin</code>下生成一下 <code>redis</code> 的可执行文件，为了方便可以在 <code>redis-6.0.9</code> 建一个 <code>bin</code> 目录，把 <code>redis</code> 这些可执行文件都放到bin目录下，方便执行。</p><p>执行<code>./redis-server</code>命令</p><p>出现 <code>Ready to accept connections</code>，说明已经启动成功</p><p>5、连接redis执行<code>./redis-cli</code></p><p>6、这时 <code>redis</code> 已经安装成功，我们来进行设置 <code>redis.conf</code> 配置文件：</p><ul><li><p><code>redis</code> 默认是本机访问，其他地方无法连接，需要把这个注释掉<code>#bind 127.0.0.1</code>改成<code>bind 0.0.0.0</code> </p></li><li><p>设置后台启动 <code>redis</code> 服务 <code>daemonize</code> 设置为 <code>yes</code></p></li><li><p>执行后台启动<code>./redis-server redis.conf</code></p></li><li><p><code>appendonly</code> 是 <code>redis</code> 持久化默认为 <code>no</code>，需要改为 <code>yes</code></p></li><li><p><code>redis</code> 远程连接后，输入命令出现 <code>Error：Server closed the connection</code>，不需要登陆密码，改为 <code>no</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用命令</span></span><br><span class="line"><span class="comment">#后台启动的两种方式</span></span><br><span class="line">./redis-server redis.conf </span><br><span class="line"><span class="built_in">nohup</span> ./redis-server redis.conf &amp;</span><br><span class="line"><span class="built_in">nohup</span> ./redis-server  redis.conf  &gt;&gt; /usr/local/java/redis-6.0.9/logs/redis.log  2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment">#后台验证redis是否在启动</span></span><br><span class="line">ps -ef |grep redis 或 ps aux | grep redis</span><br><span class="line"><span class="comment">#查看端口是否在监听</span></span><br><span class="line">netstat -lntp | grep 6379</span><br><span class="line"><span class="comment">#关闭客户端</span></span><br><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure><ul><li>Redis持久化报错</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.exceptions.ResponseError: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data <span class="built_in">set</span> are disabled, because this instance is configured to report errors during writes <span class="keyword">if</span> RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs <span class="keyword">for</span> details about the RDB error.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将stop-writes-on-bgsave-error设置为no</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> stop-writes-on-bgsave-error no</span><br><span class="line">或者进入redis.conf改no</span><br></pre></td></tr></table></figure><ul><li><p>注意：如果 <code>redis</code> 不设置登录密码在服务器上会出现 <code>key</code> 丢失情况，设置密码</p></li><li><p>在 <code>redis</code> 中所有的 <code>key</code> 都变成 <code>backup</code> 是因为 <code>redis</code> 暴漏在公网ip下，没有设置密码，遭到恶意请求</p></li><li><p>如果出现一下错误修改 <code>protected-mode  yes</code> 改为：<code>protected-mode no</code>，密码太短也有可能会出现这个问题</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to <span class="number">192.168</span><span class="number">.43</span><span class="number">.129</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="Redis-Docker-安装测试"><a href="#Redis-Docker-安装测试" class="headerlink" title="Redis Docker 安装测试"></a>Redis Docker 安装测试</h2><p>docker官方文档安装方式：<code>https://hub.docker.com/_/redis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取最新镜像</span></span><br><span class="line">docker pull redis:latest</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker run --name myredis -p6379:6379 --restart=always -d redis:latest --requirepass <span class="string">&quot;test123456&quot;</span></span><br><span class="line"><span class="comment"># redis 使用命令行设置密码和持久化方式</span></span><br><span class="line">docker run --name myredis -v /data/redis/data:/data \</span><br><span class="line">-p 6379:6379 -d redis:latest --requirepass <span class="string">&quot;test123456&quot;</span> --appendonly <span class="built_in">yes</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定配置文件启动</span></span><br><span class="line">docker run --name myredis -v /data/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf --requirepass <span class="string">&quot;test123456&quot;</span> --appendonly <span class="built_in">yes</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis 使用自定义配置方式启动，如果要修改配置文件直接修改</span></span><br><span class="line">docker run --name myredis \</span><br><span class="line">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器MySQL不同安装部署方式</title>
      <link href="/posts/6113e70e.html"/>
      <url>/posts/6113e70e.html</url>
      
        <content type="html"><![CDATA[<h3 id="MySql使用rpm的方式安装"><a href="#MySql使用rpm的方式安装" class="headerlink" title="MySql使用rpm的方式安装"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>1、安装 <code>MySQL</code> 官方的 <code>yum repository</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"> <span class="comment">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class="line">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p><p>2、下载 rpm 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>注意：添加 <code>mysql-server rpm</code>包（当前版本是 MySQL5.7）</p><p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p><p>3、安装 <code>MySQL</code> 服务 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 MySql 服务方式一：</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="comment"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class="line"><span class="comment"># 1、安装 mysql-server</span></span><br><span class="line">yum install mysql-server</span><br><span class="line"><span class="comment"># 2、安装 mysql-devel</span></span><br><span class="line">yum install mysql-devel</span><br><span class="line"><span class="comment"># 3、安装 mysql</span></span><br><span class="line">yum install mysql</span><br><span class="line"><span class="comment"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class="line"><span class="comment"># 查看 MySQL 安装的软件</span></span><br><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p>4、启动 <code>MySQL</code> 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务 </span></span><br><span class="line">systemctl start mysqld.service  或者  service mysqld start</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status mysqld.service  或者  service mysqld status</span><br><span class="line"><span class="comment">#　重启服务</span></span><br><span class="line">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class="line"><span class="comment"># 查看 mysql 启动的 pid</span></span><br><span class="line">pidof mysqld</span><br></pre></td></tr></table></figure><p>5、设置 <code>MySql</code> 开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"><span class="comment"># 刷新配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>6、关于登录 <code>MySql</code>，登录命令（第一种方式使用密码登录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure><p>第一次启动 <code>MySQL</code> 后，就会有临时密码，这个默认的初始密码在 <code>/var/log/mysqld.log</code> 文件中，我们可以用以下命令来查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">[root@izuf61151k3ad2dso6mo9oz mysql]<span class="comment"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class="line">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class="line">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class="line">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class="line"><span class="comment"># 进入 mysql 修改 root 用户的密码</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;shijinying123!@#&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 修改之后刷新</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class="line"><span class="comment"># 出现这种情况一次执行一下命令</span></span><br><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class="line"><span class="comment"># 完成之后就可以使用新密码登录了</span></span><br><span class="line">mysql -u root -p Shijinying123!@<span class="comment">#</span></span><br><span class="line"><span class="comment"># 修改 root 用户远程 连接</span></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user =<span class="string">&#x27;root&#x27;</span>;  <span class="comment">#　直接修改 root 用户</span></span><br><span class="line"><span class="comment"># 修改完刷新数据库</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 新增一条</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>配置文件说明：</p><blockquote><p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p></blockquote><p>一下常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 MySQL 是否已经安装</span></span><br><span class="line">yum list installed | grep mysql</span><br><span class="line"><span class="comment"># 已经安装的使用 yum 方式卸载</span></span><br><span class="line">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class="line"><span class="comment"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span> </span><br><span class="line"><span class="comment"># 查看 MySQL 版本</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"><span class="comment"># 查看当前的启动的 MySQL 版本</span></span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line"><span class="comment"># 查看 MySQL 的安装目录</span></span><br><span class="line">whereis mysql</span><br><span class="line"><span class="comment"># 查看 mysql 启动的 pid</span></span><br><span class="line">pidof mysqld</span><br><span class="line"><span class="comment"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class="line">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure><h3 id="MySql使用Docker的方式安装"><a href="#MySql使用Docker的方式安装" class="headerlink" title="MySql使用Docker的方式安装"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>创建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/mysql/data /data/mysql/conf /data/mysql/log</span><br></pre></td></tr></table></figure><p>2、启动 <code>mysql</code> 镜像</p><p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mysql-test \</span><br><span class="line">-v /data/mysql/data/:/var/lib/mysql \</span><br><span class="line">-v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf \</span><br><span class="line">-v /data/mysql/log:/var/log/mysql \</span><br><span class="line">--privileged=<span class="literal">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \</span><br><span class="line">-p 3306:3306 --restart=always mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器node环境配置</title>
      <link href="/posts/d68e7f96.html"/>
      <url>/posts/d68e7f96.html</url>
      
        <content type="html"><![CDATA[<p>服务器用的是阿里云 <code>Centos7.9</code></p><p><code>node</code>官网：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p>镜像下载地址：<a href="https://nodejs.org/download/release">https://nodejs.org/download/release</a></p><p>选择需要版本的 node，在服务器指定目录下进行一下命令下载（不建议安装最新版本）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/download/release/latest-v17.x/node-v17.9.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf node-v17.9.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 profile 文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># node 环境变量，追加以下内容</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/data/node/node-v17.9.1-linux-x64/bin</span><br><span class="line"><span class="comment"># 保存并刷新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>查看版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>出现版本号则说明配置成功</p><p>注意：查看版本号时出现以下错误，说明该操作系统的GLIBC版本低于Node所能支持的版本，建议16.x的版本，不建议安装最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@aliyun ~]<span class="comment"># node -v</span></span><br><span class="line">node: /lib64/libm.so.6: version `GLIBC_2.27<span class="string">&#x27; not found (required by node)</span></span><br><span class="line"><span class="string">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27;</span> not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `CXXABI_1.3.9<span class="string">&#x27; not found (required by node)</span></span><br><span class="line"><span class="string">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27;</span> not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.28<span class="string">&#x27; not found (required by node)</span></span><br><span class="line"><span class="string">node: /lib64/libc.so.6: version `GLIBC_2.25&#x27;</span> not found (required by node)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器git配置及常用命令</title>
      <link href="/posts/c699e256.html"/>
      <url>/posts/c699e256.html</url>
      
        <content type="html"><![CDATA[<h2 id="tar-压缩包安装配置"><a href="#tar-压缩包安装配置" class="headerlink" title="tar 压缩包安装配置"></a>tar 压缩包安装配置</h2><p>卸载旧版本</p><ul><li><p>yum 直接卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure></li><li><p>查看 git 安装目录 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> -a git</span><br><span class="line"><span class="comment"># 显示出来 git 安装路径</span></span><br><span class="line"><span class="built_in">cd</span> /git安装路径</span><br><span class="line"><span class="comment"># 执行删除命令</span></span><br><span class="line"><span class="built_in">rm</span> -rf git*</span><br></pre></td></tr></table></figure></li></ul><p>下载 git 安装包</p><p>官方镜像地址：<code>https://mirrors.edge.kernel.org/pub/software/scm/git/</code></p><p>在服务器目录下下载 git 对应版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.40.0.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf git-2.40.0.tar.gz</span><br></pre></td></tr></table></figure><p>安装可能需要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel openssl-devel zlib-devel gcc-c++ </span><br><span class="line">yum install perl-ExtUtils-MakeMaker automake autoconf libtool make</span><br></pre></td></tr></table></figure><p>进入 git-2.40.0 文件夹下，进行编译安装等命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装编译 git 可执行文件，并指定文件位置</span></span><br><span class="line">./configure --prefix=/data/git 等同于 make PREFIX=/data/git all </span><br><span class="line"><span class="comment"># 安装到指定目录</span></span><br><span class="line">make PREFIX=/data/git &amp;&amp; make PREFIX=/data/git install</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 profile 文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># git 环境变量，追加以下内容</span></span><br><span class="line"><span class="built_in">export</span> GIT_HOME=/data/git</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;GIT_HOME&#125;</span>/bin</span><br><span class="line"><span class="comment"># 等同于上面两行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/data/git/bin</span><br><span class="line"><span class="comment"># 保存刷新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>查看版本 <code>git --version</code>，出现以下内容则说明安装配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun /]<span class="comment"># git --version</span></span><br><span class="line">git version 2.40.0</span><br><span class="line">[root@aliyun /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>设置密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xx@xx.com&quot;</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="yum-安装配置"><a href="#yum-安装配置" class="headerlink" title="yum 安装配置"></a>yum 安装配置</h2><p>yum 安装最简单，但无法控制安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line"><span class="comment"># 检查安装的版本</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="Git常用命令最全总结"><a href="#Git常用命令最全总结" class="headerlink" title="Git常用命令最全总结"></a>Git常用命令最全总结</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li><code>git init</code>：初始化一个 Git 仓库。</li><li><code>git clone &lt;repository&gt;</code>：克隆一个 Git 仓库到本地。</li><li><code>git add &lt;file&gt;</code>：将指定文件添加到暂存区。</li><li><code>git add .</code>：将所有修改过的文件添加到暂存区。</li><li><code>git commit -m &quot;message&quot;</code>：提交所有已经添加到暂存区的文件到本地仓库，并附带一条提交信息。</li><li><code>git status</code>：查看工作目录和暂存区的状态。</li><li><code>git diff</code>：查看工作目录和暂存区之间的差异。</li><li><code>git log</code>：查看提交日志。</li><li><code>git checkout &lt;branch&gt;</code>：切换到指定分支。</li><li><code>git branch</code>：查看所有分支。</li><li><code>git merge &lt;branch&gt;</code>：将指定分支合并到当前分支。</li><li><code>git pull</code>：从远程仓库拉取最新代码到本地仓库。</li><li><code>git push</code>：将本地仓库最新代码推送到远程仓库。</li></ul><h3 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h3><ul><li><code>git stash</code>：将工作区的改动保存到一个新的 stash 中。</li><li><code>git stash list</code>：列出所有 stash。</li><li><code>git stash apply</code>：将最近的 stash 应用到工作区。</li><li><code>git stash drop</code>：删除最近的 stash。</li><li><code>git stash pop</code>：应用最近的 stash 并删除它。</li><li><code>git reset &lt;file&gt;</code>：将指定文件在暂存区的修改回退到工作目录。</li><li><code>git reset --hard HEAD</code>：将工作目录和暂存区中的所有修改回退到最新的本地提交。</li><li><code>git revert &lt;commit&gt;</code>：撤销指定的提交。</li><li><code>git cherry-pick &lt;commit&gt;</code>：将指定提交合并到当前分支。</li><li><code>git rebase &lt;branch&gt;</code>：将当前分支变基于指定分支。</li><li><code>git tag</code>：列出所有 tag。</li><li><code>git tag &lt;tag&gt;</code>：创建一个新 tag。</li><li><code>git tag -a &lt;tag&gt; -m &quot;message&quot; &lt;commit&gt;</code>：创建一个带有附注信息的新 tag。</li><li><code>git push --tags</code>：将所有 tag 推送到远程仓库。</li><li><code>git fetch &lt;remote&gt;</code>：从远程仓库获取最新代码。</li><li><code>git remote</code>：查看远程仓库列表。</li><li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个新的远程仓库。</li><li><code>git remote remove &lt;name&gt;</code>：删除指定的远程仓库。</li><li><code>git remote set-url &lt;name&gt; &lt;newurl&gt;</code>：修改指定远程仓库的 URL。</li></ul><h3 id="Git-分支操作"><a href="#Git-分支操作" class="headerlink" title="Git 分支操作"></a>Git 分支操作</h3><ul><li><code>git branch</code>：列出本地分支列表。</li><li><code>git branch -a</code>：列出本地和远程分支列表。</li><li><code>git branch &lt;branch-name&gt;</code>：新建分支。</li><li><code>git branch -d &lt;branch-name&gt;</code>：删除分支。</li><li><code>git checkout &lt;branch-name&gt;</code>：切换到指定分支。</li><li><code>git checkout -b &lt;new-branch-name&gt;</code>：创建新分支并切换到该分支。</li><li><code>git merge &lt;branch-name&gt;</code>：合并指定分支到当前分支。</li><li><code>git merge --no-ff &lt;branch-name&gt;</code>：不使用快进模式合并指定分支到当前分支。</li><li><code>git log --graph</code>：以图表的形式显示分支的合并情况。</li></ul><h3 id="Git-标签操作"><a href="#Git-标签操作" class="headerlink" title="Git 标签操作"></a>Git 标签操作</h3><ul><li><code>git tag</code>：列出所有本地标签。</li><li><code>git tag -l &quot;pattern&quot;</code>：列出所有符合指定模式的标签。</li><li><code>git tag &lt;tag-name&gt;</code>：新建标签。</li><li><code>git tag -a &lt;tag-name&gt; -m &quot;message&quot;</code>：使用附注信息新建标签。</li><li><code>git tag -d &lt;tag-name&gt;</code>：删除标签。</li><li><code>git push origin &lt;tag-name&gt;</code>：推送指定标签到远程仓库。</li><li><code>git push origin --tags</code>：推送所有本地标签到远程仓库。</li><li><code>git checkout &lt;tag-name&gt;</code>：切换到指定标签。</li></ul><h3 id="Git-远程仓库操作"><a href="#Git-远程仓库操作" class="headerlink" title="Git 远程仓库操作"></a>Git 远程仓库操作</h3><ul><li><code>git clone &lt;repository&gt;</code>：克隆远程仓库。</li><li><code>git pull</code>：拉取远程仓库最新代码。</li><li><code>git fetch &lt;remote&gt;</code>：从远程仓库获取最新代码。</li><li><code>git push</code>：将本地仓库最新代码推送到远程仓库。</li><li><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：从远程仓库拉取指定分支的最新代码。</li><li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：将本地仓库的最新代码推送到指定远程仓库的指定分支。</li><li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个新的远程仓库。</li><li><code>git remote remove &lt;name&gt;</code>：删除指定的远程仓库。</li><li><code>git remote set-url &lt;name&gt; &lt;new-url&gt;</code>：修改指定远程仓库的 URL。</li><li><code>git remote -v</code>：查看远程仓库列表和对应 URL。</li></ul><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><ul><li><code>git config --global user.name &quot;name&quot;</code>：设置用户名称。</li><li><code>git config --global user.email &quot;email&quot;</code>：设置用户邮件地址。</li><li><code>git config --global core.editor &quot;editor&quot;</code>：设置默认编辑器。</li><li><code>git config --global alias.&lt;alias-name&gt; &quot;&lt;command&gt;&quot;</code>：设置别名。</li><li><code>git config --list</code>：列出所有 Git 配置。</li></ul><h3 id="Git-撤销操作"><a href="#Git-撤销操作" class="headerlink" title="Git 撤销操作"></a>Git 撤销操作</h3><ul><li><code>git reset &lt;file&gt;</code>：取消暂存文件。</li><li><code>git reset --hard</code>：撤销所有未提交的修改。</li><li><code>git reset HEAD^</code> ：回退一个版本。</li><li><code>git reset HEAD^^</code> ：回退两个版本。</li><li><code>git reset HEAD~100</code> ：回退100个版本。</li><li><code>git reset -hard HEAD~1</code>： 回退上一个版本。</li><li><code>git reset -hard 3de025010585d</code>：通过提交生成的哈希码回退版本，注意哈希码不用全部输入，输入前几个字节就可以识别出来。</li><li><code>git checkout &lt;file&gt;</code>：取消对文件的修改。</li><li><code>git checkout .</code>：撤销所有修改，包括已经暂存的和未暂存的修改。</li><li><code>git revert &lt;commit&gt;</code>：撤销指定提交的修改，生成一条新的提交记录。</li></ul><h3 id="Git-历史操作"><a href="#Git-历史操作" class="headerlink" title="Git 历史操作"></a>Git 历史操作</h3><ul><li><code>git log</code>：显示提交日志。</li><li><code>git log --graph</code>：以图形化方式显示提交日志。</li><li><code>git log --oneline</code>：显示简化版的提交日志。</li><li><code>git blame &lt;file&gt;</code>：显示指定文件的每一行是什么人在什么时间修改的。</li></ul><h3 id="Git-子模块操作"><a href="#Git-子模块操作" class="headerlink" title="Git 子模块操作"></a>Git 子模块操作</h3><ul><li><code>git submodule add &lt;repository&gt; &lt;path&gt;</code>：添加子模块。</li><li><code>git submodule init</code>：初始化子模块。</li><li><code>git submodule update</code>：更新子模块。</li><li><code>git submodule foreach &lt;command&gt;</code>：对每个子模块执行指定命令。</li></ul><h3 id="Git-忽略文件"><a href="#Git-忽略文件" class="headerlink" title="Git 忽略文件"></a>Git 忽略文件</h3><ul><li><code>.gitignore</code>：忽略指定文件或目录。</li><li><code>git rm --cached &lt;file&gt;</code>：从 Git 仓库中删除指定文件，但在本地保留。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器Docker安装部署</title>
      <link href="/posts/76bca4ef.html"/>
      <url>/posts/76bca4ef.html</url>
      
        <content type="html"><![CDATA[<h4 id="1、虚拟化容器技术——Docker的安装及常用命令"><a href="#1、虚拟化容器技术——Docker的安装及常用命令" class="headerlink" title="1、虚拟化容器技术——Docker的安装及常用命令"></a>1、虚拟化容器技术——Docker的安装及常用命令</h4><p>官网地址：<a href="https://docs.docker.com/engine/install/centos/">链接</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 yum 的索引</span></span><br><span class="line"><span class="comment"># yum 包更新到最新</span></span><br><span class="line">yum update 或者 yum -y update</span><br><span class="line"><span class="comment"># 安装前先删除 docker 相关的包</span></span><br><span class="line"><span class="comment"># 使用 yum remove docker* 和一下命令是一样的</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="comment"># 更新之后最简单的安装方式 (或者使用以方式)</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="comment"># 安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 设置 yum 源为阿里云</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 安装 docker，不指定版本版本好默认为最新版本</span></span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#　安装后查看 docker 版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="comment"># 安装加速镜像</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="comment"># 通过修改 daemon 配置文件 /etc/docker/daemon.json 来使用加速器</span></span><br><span class="line"><span class="comment">#　镜像地址：https://k7da99jp.mirror.aliiyuncs.com</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://k7da99jp.mirror.aliiyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>补充说明：</p><h4 id="2、docker-相关命令"><a href="#2、docker-相关命令" class="headerlink" title="2、docker 相关命令"></a>2、docker 相关命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 docker 版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 停止 docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看 docker 状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl unenable docker</span><br><span class="line"><span class="comment"># 查看 docker 相关信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看 docker 一些帮助</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 docker 镜像</span></span><br><span class="line">docker run -d image-name</span><br><span class="line"><span class="comment"># 启动一个容器</span></span><br><span class="line">docker start container_id or container_name </span><br><span class="line"><span class="comment"># 停止运行容器</span></span><br><span class="line">docker stop container_id or or container_name </span><br><span class="line"><span class="comment"># 查看所有镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span> </span><br><span class="line">docker container <span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment"># 查看所有正在运行的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 查看最近运行的容器</span></span><br><span class="line">docker ps -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像、容器、数据卷所占用的空间</span></span><br><span class="line">docker system <span class="built_in">df</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker stats 查看镜像内存、cpu的使用情况</span></span><br><span class="line">docker stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志 </span></span><br><span class="line">docker logs -f myredis</span><br><span class="line">docker logs -f 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h5 id="2-1、虚悬镜像"><a href="#2-1、虚悬镜像" class="headerlink" title="2-1、虚悬镜像"></a>2-1、虚悬镜像</h5><p>在镜像列表中，可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure><p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> -f dangling=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago     </span><br></pre></td></tr></table></figure><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><h5 id="2-2、用-docker-image-ls-命令来配合"><a href="#2-2、用-docker-image-ls-命令来配合" class="headerlink" title="2-2、用 docker image ls 命令来配合"></a>2-2、用 docker image ls 命令来配合</h5><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p><p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> $(docker image <span class="built_in">ls</span> -q redis)</span><br></pre></td></tr></table></figure><p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><p><code>docker image rm $(docker image ls -q -f before=mongo:3.2)</code></p><h4 id="3、docker-操作容器"><a href="#3、docker-操作容器" class="headerlink" title="3、docker 操作容器"></a>3、docker 操作容器</h4><p><strong>启动容器</strong></p><p>所需要的命令主要为 <code>docker run</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉去镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="comment"># 查看启动命令</span></span><br><span class="line">docker run --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 启动镜像</span></span><br><span class="line">docker run --name mynginx -p 80:80 -d nginx</span><br><span class="line"><span class="comment"># 修改 nginx 开机启动 注意：update不能修改端口</span></span><br><span class="line">docker update --restart=always</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mynginx bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果进入容器不能编辑文件，执行一下命令</span></span><br><span class="line">apt-get update </span><br><span class="line">apt-get install -y vim</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除一个镜像</span></span><br><span class="line">docker rmi image-id or image-name</span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"><span class="comment"># 强制删除所有镜像</span></span><br><span class="line">docker rmi -r $(docker images -q)</span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line">docker rmi $(docker images -q -f dangling=<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># 删除所有容器 (停止的镜像文件)</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -a -q)</span><br><span class="line"><span class="comment"># 强制删除正在运行中的一个容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f 镜像名|<span class="built_in">id</span></span><br><span class="line"><span class="comment"># 查看所有数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除所有数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> [volume_name]</span><br><span class="line"><span class="comment"># 删除所有未关联的数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> $(docker volume <span class="built_in">ls</span> -qf dangling=<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker container <span class="built_in">rm</span> 容器<span class="built_in">id</span>|镜像名字   或者 docker <span class="built_in">rm</span> 容器<span class="built_in">id</span>|镜像名字</span><br><span class="line"><span class="comment"># 清除所有处于终止状态的容器，用 docker container ls -a 查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</span></span><br><span class="line"><span class="comment"># 注意：数据存储的地方</span></span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h4 id="4、Docker-提交、修改内容、传输"><a href="#4、Docker-提交、修改内容、传输" class="headerlink" title="4、Docker 提交、修改内容、传输"></a>4、Docker 提交、修改内容、传输</h4><p><strong>1、修改容器内部内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 nginx</span></span><br><span class="line">docker run --name=mynginx -p 80:80 -d nginx</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mynginx /bin/bash</span><br><span class="line"><span class="comment"># 进入index.html 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line"><span class="comment"># 修改首页内容后，再次访问，这时首页内容已经改变</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;Welcom come ningx&lt;/h1&gt;&quot;</span> &gt; index.html</span><br></pre></td></tr></table></figure><p><strong>2、提交容器内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交到docker容器</span></span><br><span class="line">docker commit -a <span class="string">&quot;ss&quot;</span>  -m <span class="string">&quot;首页内容变化&quot;</span> mynginx mynginx:v1.0</span><br><span class="line"><span class="comment"># docker iamges 查看 mynginx:v1.0 镜像 </span></span><br><span class="line"><span class="comment"># 将镜像保存成压缩包 默认复制到当前所在文件夹</span></span><br><span class="line">docker save -o  mynginx.tar mynginx:v1.0</span><br></pre></td></tr></table></figure><p><strong>3、镜像传输</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将打包好的镜像传输到另一台机器</span></span><br><span class="line">scp mynginx.tar root@101.133.170.222:/data/nginx</span><br><span class="line"><span class="comment"># 执行以上命令输入密码即可传输，注意：传输比较慢</span></span><br><span class="line"><span class="comment"># 加载镜像</span></span><br><span class="line">docker load -i mynginx.tar</span><br><span class="line"><span class="comment"># docker images 查看已加载的镜像</span></span><br><span class="line"><span class="comment"># 启动 访问ip查看即可</span></span><br><span class="line">docker run --name mynginx -p 80:80 -d mynginx:v1.0</span><br></pre></td></tr></table></figure><p><strong>4、镜像挂在</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把容器内的文件复制到外边</span></span><br><span class="line">docker <span class="built_in">cp</span> eaeda5ac249d:/etc/nginx/nginx.conf /data/nginx/conf/</span><br><span class="line"><span class="comment"># 把外边目录下的内容复制到容器内</span></span><br><span class="line">docker <span class="built_in">cp</span> /data/nginx/conf/nginx.conf eaeda5ac249d:/etc/nginx/ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动文件挂在 :ro 表示容器内部只是可读(一般时把容器外的文件挂在到容器内，方便修改)</span></span><br><span class="line">docker run  -p 80:80 \</span><br><span class="line">-v /data/nginx/html:/usr/share/nginx/html:ro \</span><br><span class="line">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--name mynginx \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><p><strong>5、redis 安装测试</strong></p><p>docker官方文档安装方式：<code>https://hub.docker.com/_/redis</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis 使用命令行设置密码和持久化方式</span></span><br><span class="line">docker run --name myredis -v /date/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data -p 6379:6379 -d redis:latest --requirepass <span class="string">&quot;123456&quot;</span> --appendonly <span class="built_in">yes</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># redis 使用自定义配置方式启动，如果要修改配置文件直接修改</span></span><br><span class="line">docker run --name myredis \</span><br><span class="line">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure><p><strong>6、定制镜像 Dockerfile</strong></p><p>把打好的 jar 包上传到服务器上</p><p>编辑 DockerFile 复制一下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该镜像需要依赖的基础镜像 或者 FROM java:8</span></span><br><span class="line">FROM openjdk:8</span><br><span class="line"><span class="comment"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class="line">ADD java-demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line"><span class="comment"># 声明服务运行在8088端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment"># 指定docker容器启动时运行jar包</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br><span class="line"><span class="comment"># 指定维护者的名字</span></span><br><span class="line">MAINTAINER ss</span><br></pre></td></tr></table></figure><p>构建镜像：<code>docker build -t my-demo:v1.0 -f DockerFile . </code></p><p>启动构建完的镜像：<code>docker run --name mydemo -p 8001:8080 -d my-demo:v1.0</code></p><p>访问：<code>http://ip:8001/hello</code></p><p><strong>7、卸载 docker 和相关依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、卸载相关的依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 2、删除相关的资源</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h4 id="5、docker-图形化工具-portainer"><a href="#5、docker-图形化工具-portainer" class="headerlink" title="5、docker 图形化工具 portainer"></a>5、docker 图形化工具 portainer</h4><p>Github 地址：<code>https://github.com/portainer/portainer</code></p><p>直接使用 docker 来安装 portainer 是非常方便的，仅需要两步即可完成。</p><p>5-1、首先下载 portainer 的 docker 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br></pre></td></tr></table></figure><p>5-1、再使用如下命令运行 portainer 容器</p><p>官网部署文档：<code>https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 8000:8000 --name portainer \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v /mydata/portainer/data:/data \</span><br><span class="line">-d portainer/portainer:latest</span><br></pre></td></tr></table></figure><p>第一次登录的时候需要创建管理员账号，访问地址：<a href="http://ip:9000/">http://ip:9000/</a></p><h4 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h4><p>出现以下错误 <code>-bash: /usr/bin/yum: No such file or directory</code> 更换yum源</p><p>到 <code>http://mirrors.kernel.org/centos/</code> 或者 <code>http://mirrors.163.com/centos/</code> 找对应系统版本号和系统位数下载，找到 <code>yum、yum-plugin-fastestmirror、yum-metadata-parser、python-urlgrabber</code> 这四个软件包下载</p><p>下载命令 直接用 wget 下载 rpm 包，然后执行下面三条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh  --nodeps yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm </span><br><span class="line">rpm -ivh  --nodeps yum-metadata-parser-1.1.4-10.el7.x86_64.rpm </span><br><span class="line">rpm -ivh  --nodeps yum-3.4.3-158.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装 nginx 出现以下问题，说明挂载的文件夹不存在，需要先把文件创建好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun data]<span class="comment"># docker run --name mynginx -p 80:80 -p 443:443 -v /data/nginx/conf/:/etc/nginx/nginx.conf --privileged=true -v /data/nginx/log:/var/log/nginx -e TZ=&quot;Asia/Shanghai&quot; --restart=always -d nginx:latest</span></span><br><span class="line">8fe34ac4b3793b486ccf37ce9d86210a803e1de90df4727e440d9740983e8409</span><br><span class="line">/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:290: starting container process caused <span class="string">&quot;container init exited prematurely&quot;</span>.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器Maven环境安装配置</title>
      <link href="/posts/f12e0651.html"/>
      <url>/posts/f12e0651.html</url>
      
        <content type="html"><![CDATA[<p>阿里云服务器配置 <code>maven</code> 环境变量</p><p>阿里云 <code>maven</code> 镜像<a href="https://mirrors.aliyun.com/apache/maven/maven-3/">地址</a>，根据自己需求下载对应版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> maven</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://mirrors.aliyun.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"><span class="comment"># 进入</span></span><br><span class="line"><span class="built_in">cd</span>  apache-maven-3.6.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取路径:</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置环境变量：</span></span><br><span class="line">vim  /etc/profile</span><br><span class="line">=====================================================</span><br><span class="line"><span class="comment"># 配置文件添加下面两行内容，自己maven安装目录，例如：/maven/apache-maven-3.6.3</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/maven/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line"><span class="comment"># 刷新环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 查看maven版本</span></span><br><span class="line">mvn -version</span><br></pre></td></tr></table></figure><p>修改仓库默认地址，进入 <code>maven</code> 下的 <code>conf</code> 目录，编辑 <code>settings.xml</code> 文件，打开 <code>localRepository</code> 注释的仓库地址，修改自己存放的依赖地址即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 <code>maven</code> 配置文件下的 <code>settings.xml</code> 镜像地址为阿里云的，替换 <code>mirrors</code> 以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里云镜像1--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunId<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云镜像2--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云镜像3--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云镜像4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://central.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器JDK安装配置</title>
      <link href="/posts/82eb5d0c.html"/>
      <url>/posts/82eb5d0c.html</url>
      
        <content type="html"><![CDATA[<h4 id="JDK安装和配置"><a href="#JDK安装和配置" class="headerlink" title="JDK安装和配置"></a>JDK安装和配置</h4><p>1、下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p>2、上传到服务器上</p><p>3、在上传后的 jdk 目录执行 <a href="https://www.aliyundrive.com/s/5Ksswouz3ka">下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u291-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>4、使用 vim 编辑器，配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment"># 在文件最后添加如下内容，</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_121</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>5、退出编辑器，使环境变量设置立即生效即可：source &#x2F;etc&#x2F;profile</p><p>6、输入 java -version  出现以下内容说明环境变量配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf61151k3ad2dso6mo9oz /]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_152&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_152-b16)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)</span><br></pre></td></tr></table></figure><p><strong>使用 yum 安装 jdk 非常简单，只需一行命令即可</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载之前的版本</span></span><br><span class="line">yum remove -y `yum list installed | grep java | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">yum remove -y `yum list installed | grep jdk | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># 安装全部依赖</span></span><br><span class="line">yum install -y java-1.8.0-openjdk*</span><br><span class="line"><span class="comment"># 开发环境，不安装不能进行 javac 编译</span></span><br><span class="line">yum install -y java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><p>yum 安装配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找安装目录，依次执行一下命令</span></span><br><span class="line"><span class="built_in">which</span> java</span><br><span class="line"><span class="built_in">ls</span> -lr /usr/bin/java</span><br><span class="line"><span class="built_in">ls</span> -lrt /etc/alternatives/java</span><br><span class="line"><span class="comment"># 可以直接使用 find 命令查找</span></span><br><span class="line">find / -name java</span><br></pre></td></tr></table></figure><p>出现以下结果则可查看 jdk 默认安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun /]<span class="comment"># ls -lrt /etc/alternatives/java</span></span><br><span class="line">lrwxrwxrwx 1 root root 73 Mar 27 14:46 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure><p>安装路径为：<code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64</code></p><p>编辑 profile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JDK 环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure><p>刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检查 jdk 安装配置是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行以下命令都出现版本则说明安装成功</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line"><span class="comment"># 如果 javac 不能执行成功，安装JDK，如果没有 java-1.8.0-openjdk-devel 就没有 javac 命令</span></span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure><h5 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h5><p>使用 yum 安装可能出现问题</p><p>如果出现以下情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># yum update</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">There are no enabled repos.</span><br><span class="line"> Run <span class="string">&quot;yum repolist all&quot;</span> to see the repos you have.</span><br><span class="line"> To <span class="built_in">enable</span> Red Hat Subscription Management repositories:</span><br><span class="line">     subscription-manager repos --<span class="built_in">enable</span> &lt;repo&gt;</span><br><span class="line"> To <span class="built_in">enable</span> custom repositories:</span><br><span class="line">     yum-config-manager --<span class="built_in">enable</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure><p>执行前先备份：<code>cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</code></p><p>阿里 repo 文件：<code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p><p>执行命令：<code>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p><p>wget 和 curl 都是下载的意思，执行一行命令即可</p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="MySql使用rpm的方式安装"><a href="#MySql使用rpm的方式安装" class="headerlink" title="MySql使用rpm的方式安装"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>1、安装 MySQL 官方的 yum repository</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/posts/9520183a.html"/>
      <url>/posts/9520183a.html</url>
      
        <content type="html"><![CDATA[<h3 id="MySql使用rpm的方式安装"><a href="#MySql使用rpm的方式安装" class="headerlink" title="MySql使用rpm的方式安装"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>1、安装 MySQL 官方的 yum repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"> <span class="comment">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class="line">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p><p>2、下载 rpm 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：添加mysql-server rpm包（当前版本是 MySQL5.7）</p><p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p><p>3、安装 MySQL 服务 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 MySql 服务方式一：</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="comment"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class="line"><span class="comment"># 1、安装 mysql-server</span></span><br><span class="line">yum install mysql-server</span><br><span class="line"><span class="comment"># 2、安装 mysql-devel</span></span><br><span class="line">yum install mysql-devel</span><br><span class="line"><span class="comment"># 3、安装 mysql</span></span><br><span class="line">yum install mysql</span><br><span class="line"><span class="comment"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class="line"><span class="comment"># 查看 MySQL 安装的软件</span></span><br><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p>4、启动MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务 </span></span><br><span class="line">systemctl start mysqld.service  或者  service mysqld start</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status mysqld.service  或者  service mysqld status</span><br><span class="line"><span class="comment">#　重启服务</span></span><br><span class="line">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class="line"><span class="comment"># 查看 mysql 启动的 pid</span></span><br><span class="line">pidof mysqld</span><br></pre></td></tr></table></figure><p>5、设置 MySql 开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"><span class="comment"># 刷新配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>6、关于登录 MySql，登录命令（&#x3D;&#x3D;第一种方式使用密码登录&#x3D;&#x3D;）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure><p>第一次启动MySQL后，就会有临时密码，这个默认的初始密码在&#x2F;var&#x2F;log&#x2F;mysqld.log文件中，我们可以用以下命令来查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">[root@izuf61151k3ad2dso6mo9oz mysql]<span class="comment"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class="line">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class="line">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class="line">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class="line"><span class="comment"># 进入 mysql 修改 root 用户的密码</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;shijinying123!@#&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 修改之后刷新</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class="line"><span class="comment"># 出现这种情况一次执行一下命令</span></span><br><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class="line"><span class="comment"># 完成之后就可以使用新密码登录了</span></span><br><span class="line">mysql -u root -p Shijinying123!@<span class="comment">#</span></span><br><span class="line"><span class="comment"># 修改 root 用户远程 连接</span></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user =<span class="string">&#x27;root&#x27;</span>;  <span class="comment">#　直接修改 root 用户</span></span><br><span class="line"><span class="comment"># 修改完刷新数据库</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 新增一条</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;配置文件说明：&#x3D;&#x3D;</p><blockquote><p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p></blockquote><p>一下常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 MySQL 是否已经安装</span></span><br><span class="line">yum list installed | grep mysql</span><br><span class="line"><span class="comment"># 已经安装的使用 yum 方式卸载</span></span><br><span class="line">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class="line"><span class="comment"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span> </span><br><span class="line"><span class="comment"># 查看 MySQL 版本</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"><span class="comment"># 查看当前的启动的 MySQL 版本</span></span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line"><span class="comment"># 查看 MySQL 的安装目录</span></span><br><span class="line">whereis mysql</span><br><span class="line"><span class="comment"># 查看 mysql 启动的 pid</span></span><br><span class="line">pidof mysqld</span><br><span class="line"><span class="comment"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class="line">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure><h3 id="MySql使用Docker的方式安装"><a href="#MySql使用Docker的方式安装" class="headerlink" title="MySql使用Docker的方式安装"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>2、启动 mysql镜像</p><p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mysql-test \</span><br><span class="line">-v /data/mysql/mysql-data/:/var/lib/mysql \</span><br><span class="line">-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">--privileged=<span class="literal">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \</span><br><span class="line">-p 3306:3306 --restart=always mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改命令</span></span><br><span class="line">docker update </span><br></pre></td></tr></table></figure><p>my.cnf 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment"># it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment"># the Free Software Foundation; version 2 of the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment"># GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment"># along with this program; if not, write to the Free Software</span></span><br><span class="line"><span class="comment"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span></span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line">!includedir /etc/mysql/mysql.conf.d/</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">max_connections = 3000</span><br><span class="line">max_user_connections = 3000</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">max_allowed_packet = 1G</span><br><span class="line">character_set_server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># bin-log</span></span><br><span class="line">expire_logs_days = 15</span><br><span class="line">binlog_format=mixed</span><br><span class="line">server-id=168168</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################</span></span><br><span class="line"><span class="comment">## log slow</span></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line">slow_query_log=off</span><br><span class="line">slow_query_log_file=/var/log/mysql/mysqld_slow.log</span><br><span class="line">long_query_time=1</span><br><span class="line">log_queries_not_using_indexes=on</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################</span></span><br><span class="line"><span class="comment">## innodb</span></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">innodb_log_file_size=1024M</span><br><span class="line">innodb_log_buffer_size=64M </span><br><span class="line"></span><br><span class="line">table_open_cache = 8000</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
